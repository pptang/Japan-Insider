-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Wordpress.Object.Comment exposing (ChildrenOptionalArguments, ContentOptionalArguments, agent, approved, author, authorIp, children, commentId, commentedOn, content, date, dateGmt, id, karma, parent, type_)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Wordpress.Enum.PostObjectFieldFormatEnum
import Wordpress.InputObject
import Wordpress.Interface
import Wordpress.Object
import Wordpress.Scalar
import Wordpress.ScalarCodecs
import Wordpress.Union


{-| User agent used to post the comment. This field is equivalent to WP\_Comment-&gt;comment\_agent and the value matching the &quot;comment\_agent&quot; column in SQL.
-}
agent : SelectionSet (Maybe String) Wordpress.Object.Comment
agent =
    Object.selectionForField "(Maybe String)" "agent" [] (Decode.string |> Decode.nullable)


{-| The approval status of the comment. This field is equivalent to WP\_Comment-&gt;comment\_approved and the value matching the &quot;comment\_approved&quot; column in SQL.
-}
approved : SelectionSet (Maybe String) Wordpress.Object.Comment
approved =
    Object.selectionForField "(Maybe String)" "approved" [] (Decode.string |> Decode.nullable)


{-| The author of the comment
-}
author : SelectionSet decodesTo Wordpress.Union.CommentAuthorUnion -> SelectionSet (Maybe decodesTo) Wordpress.Object.Comment
author object_ =
    Object.selectionForCompositeField "author" [] object_ (identity >> Decode.nullable)


{-| IP address for the author. This field is equivalent to WP\_Comment-&gt;comment\_author\_IP and the value matching the &quot;comment\_author\_IP&quot; column in SQL.
-}
authorIp : SelectionSet (Maybe String) Wordpress.Object.Comment
authorIp =
    Object.selectionForField "(Maybe String)" "authorIp" [] (Decode.string |> Decode.nullable)


type alias ChildrenOptionalArguments =
    { first : OptionalArgument Int
    , last : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , where_ : OptionalArgument Wordpress.InputObject.CommentToCommentConnectionWhereArgs
    }


{-| Connection between the Comment type and the Comment type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where\_ - Arguments for filtering the connection

-}
children : (ChildrenOptionalArguments -> ChildrenOptionalArguments) -> SelectionSet decodesTo Wordpress.Object.CommentToCommentConnection -> SelectionSet (Maybe decodesTo) Wordpress.Object.Comment
children fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "where" filledInOptionals.where_ Wordpress.InputObject.encodeCommentToCommentConnectionWhereArgs ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "children" optionalArgs object_ (identity >> Decode.nullable)


{-| The object the comment was added to
-}
commentedOn : SelectionSet decodesTo Wordpress.Union.PostObjectUnion -> SelectionSet (Maybe decodesTo) Wordpress.Object.Comment
commentedOn object_ =
    Object.selectionForCompositeField "commentedOn" [] object_ (identity >> Decode.nullable)


{-| ID for the comment, unique among comments.
-}
commentId : SelectionSet (Maybe Int) Wordpress.Object.Comment
commentId =
    Object.selectionForField "(Maybe Int)" "commentId" [] (Decode.int |> Decode.nullable)


type alias ContentOptionalArguments =
    { format : OptionalArgument Wordpress.Enum.PostObjectFieldFormatEnum.PostObjectFieldFormatEnum }


{-| Content of the comment. This field is equivalent to WP\_Comment-&gt;comment\_content and the value matching the &quot;comment\_content&quot; column in SQL.

  - format - Format of the field output

-}
content : (ContentOptionalArguments -> ContentOptionalArguments) -> SelectionSet (Maybe String) Wordpress.Object.Comment
content fillInOptionals =
    let
        filledInOptionals =
            fillInOptionals { format = Absent }

        optionalArgs =
            [ Argument.optional "format" filledInOptionals.format (Encode.enum Wordpress.Enum.PostObjectFieldFormatEnum.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForField "(Maybe String)" "content" optionalArgs (Decode.string |> Decode.nullable)


{-| Date the comment was posted in local time. This field is equivalent to WP\_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL.
-}
date : SelectionSet (Maybe String) Wordpress.Object.Comment
date =
    Object.selectionForField "(Maybe String)" "date" [] (Decode.string |> Decode.nullable)


{-| Date the comment was posted in GMT. This field is equivalent to WP\_Comment-&gt;date\_gmt and the value matching the &quot;date\_gmt&quot; column in SQL.
-}
dateGmt : SelectionSet (Maybe String) Wordpress.Object.Comment
dateGmt =
    Object.selectionForField "(Maybe String)" "dateGmt" [] (Decode.string |> Decode.nullable)


{-| The globally unique identifier for the user
-}
id : SelectionSet Wordpress.ScalarCodecs.Id Wordpress.Object.Comment
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Karma value for the comment. This field is equivalent to WP\_Comment-&gt;comment\_karma and the value matching the &quot;comment\_karma&quot; column in SQL.
-}
karma : SelectionSet (Maybe Int) Wordpress.Object.Comment
karma =
    Object.selectionForField "(Maybe Int)" "karma" [] (Decode.int |> Decode.nullable)


{-| Parent comment of current comment. This field is equivalent to the WP\_Comment instance matching the WP\_Comment-&gt;comment\_parent ID.
-}
parent : SelectionSet decodesTo Wordpress.Object.Comment -> SelectionSet (Maybe decodesTo) Wordpress.Object.Comment
parent object_ =
    Object.selectionForCompositeField "parent" [] object_ (identity >> Decode.nullable)


{-| Type of comment. This field is equivalent to WP\_Comment-&gt;comment\_type and the value matching the &quot;comment\_type&quot; column in SQL.
-}
type_ : SelectionSet (Maybe String) Wordpress.Object.Comment
type_ =
    Object.selectionForField "(Maybe String)" "type" [] (Decode.string |> Decode.nullable)
