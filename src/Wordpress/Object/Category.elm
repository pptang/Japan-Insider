-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Wordpress.Object.Category exposing (ChildrenOptionalArguments, PostsOptionalArguments, ancestors, categoryId, children, count, description, id, link, name, parent, posts, slug, taxonomy, termGroupId, termTaxonomyId)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Wordpress.InputObject
import Wordpress.Interface
import Wordpress.Object
import Wordpress.Scalar
import Wordpress.ScalarCodecs
import Wordpress.Union


{-| The ancestors of the object
-}
ancestors : SelectionSet decodesTo Wordpress.Object.Category -> SelectionSet (Maybe (List (Maybe decodesTo))) Wordpress.Object.Category
ancestors object_ =
    Object.selectionForCompositeField "ancestors" [] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


{-| The id field matches the WP\_Post-&gt;ID field.
-}
categoryId : SelectionSet (Maybe Int) Wordpress.Object.Category
categoryId =
    Object.selectionForField "(Maybe Int)" "categoryId" [] (Decode.int |> Decode.nullable)


type alias ChildrenOptionalArguments =
    { first : OptionalArgument Int
    , last : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , where_ : OptionalArgument Wordpress.InputObject.CategoryToCategoryConnectionWhereArgs
    }


{-| Connection between the category type and the category type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where\_ - Arguments for filtering the connection

-}
children : (ChildrenOptionalArguments -> ChildrenOptionalArguments) -> SelectionSet decodesTo Wordpress.Object.CategoryToCategoryConnection -> SelectionSet (Maybe decodesTo) Wordpress.Object.Category
children fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "where" filledInOptionals.where_ Wordpress.InputObject.encodeCategoryToCategoryConnectionWhereArgs ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "children" optionalArgs object_ (identity >> Decode.nullable)


{-| The number of objects connected to the object
-}
count : SelectionSet (Maybe Int) Wordpress.Object.Category
count =
    Object.selectionForField "(Maybe Int)" "count" [] (Decode.int |> Decode.nullable)


{-| The description of the object
-}
description : SelectionSet (Maybe String) Wordpress.Object.Category
description =
    Object.selectionForField "(Maybe String)" "description" [] (Decode.string |> Decode.nullable)


{-| The global ID for the category
-}
id : SelectionSet Wordpress.ScalarCodecs.Id Wordpress.Object.Category
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The link to the term
-}
link : SelectionSet (Maybe String) Wordpress.Object.Category
link =
    Object.selectionForField "(Maybe String)" "link" [] (Decode.string |> Decode.nullable)


{-| The human friendly name of the object.
-}
name : SelectionSet (Maybe String) Wordpress.Object.Category
name =
    Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


{-| The parent object
-}
parent : SelectionSet decodesTo Wordpress.Object.Category -> SelectionSet (Maybe decodesTo) Wordpress.Object.Category
parent object_ =
    Object.selectionForCompositeField "parent" [] object_ (identity >> Decode.nullable)


type alias PostsOptionalArguments =
    { first : OptionalArgument Int
    , last : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , where_ : OptionalArgument Wordpress.InputObject.CategoryToPostConnectionWhereArgs
    }


{-| Connection between the category type and the category type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where\_ - Arguments for filtering the connection

-}
posts : (PostsOptionalArguments -> PostsOptionalArguments) -> SelectionSet decodesTo Wordpress.Object.CategoryToPostConnection -> SelectionSet (Maybe decodesTo) Wordpress.Object.Category
posts fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "where" filledInOptionals.where_ Wordpress.InputObject.encodeCategoryToPostConnectionWhereArgs ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "posts" optionalArgs object_ (identity >> Decode.nullable)


{-| An alphanumeric identifier for the object unique to its type.
-}
slug : SelectionSet (Maybe String) Wordpress.Object.Category
slug =
    Object.selectionForField "(Maybe String)" "slug" [] (Decode.string |> Decode.nullable)


{-| The name of the taxonomy this term belongs to
-}
taxonomy : SelectionSet decodesTo Wordpress.Object.Taxonomy -> SelectionSet (Maybe decodesTo) Wordpress.Object.Category
taxonomy object_ =
    Object.selectionForCompositeField "taxonomy" [] object_ (identity >> Decode.nullable)


{-| The ID of the term group that this term object belongs to
-}
termGroupId : SelectionSet (Maybe Int) Wordpress.Object.Category
termGroupId =
    Object.selectionForField "(Maybe Int)" "termGroupId" [] (Decode.int |> Decode.nullable)


{-| The taxonomy ID that the object is associated with
-}
termTaxonomyId : SelectionSet (Maybe Int) Wordpress.Object.Category
termTaxonomyId =
    Object.selectionForField "(Maybe Int)" "termTaxonomyId" [] (Decode.int |> Decode.nullable)
