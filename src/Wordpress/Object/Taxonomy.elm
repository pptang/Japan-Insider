-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Wordpress.Object.Taxonomy exposing (ConnectedPostTypeNamesOptionalArguments, ConnectedPostTypesOptionalArguments, connectedPostTypeNames, connectedPostTypes, description, graphqlPluralName, graphqlSingleName, hierarchical, id, label, name, public, restBase, restControllerClass, showCloud, showInAdminColumn, showInGraphql, showInMenu, showInNavMenus, showInQuickEdit, showInRest, showUi)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Wordpress.Enum.PostTypeEnum
import Wordpress.InputObject
import Wordpress.Interface
import Wordpress.Object
import Wordpress.Scalar
import Wordpress.ScalarCodecs
import Wordpress.Union


type alias ConnectedPostTypeNamesOptionalArguments =
    { types : OptionalArgument (List (Maybe Wordpress.Enum.PostTypeEnum.PostTypeEnum)) }


{-| A list of Post Types associated with the taxonomy

  - types - Select which post types to limit the results to

-}
connectedPostTypeNames : (ConnectedPostTypeNamesOptionalArguments -> ConnectedPostTypeNamesOptionalArguments) -> SelectionSet (Maybe (List (Maybe String))) Wordpress.Object.Taxonomy
connectedPostTypeNames fillInOptionals =
    let
        filledInOptionals =
            fillInOptionals { types = Absent }

        optionalArgs =
            [ Argument.optional "types" filledInOptionals.types (Encode.enum Wordpress.Enum.PostTypeEnum.toString |> Encode.maybe |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForField "(Maybe (List (Maybe String)))" "connectedPostTypeNames" optionalArgs (Decode.string |> Decode.nullable |> Decode.list |> Decode.nullable)


type alias ConnectedPostTypesOptionalArguments =
    { types : OptionalArgument (List (Maybe Wordpress.Enum.PostTypeEnum.PostTypeEnum)) }


{-| List of Post Types connected to the Taxonomy

  - types - Select which post types to limit the results to

-}
connectedPostTypes : (ConnectedPostTypesOptionalArguments -> ConnectedPostTypesOptionalArguments) -> SelectionSet decodesTo Wordpress.Object.PostType -> SelectionSet (Maybe (List (Maybe decodesTo))) Wordpress.Object.Taxonomy
connectedPostTypes fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { types = Absent }

        optionalArgs =
            [ Argument.optional "types" filledInOptionals.types (Encode.enum Wordpress.Enum.PostTypeEnum.toString |> Encode.maybe |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "connectedPostTypes" optionalArgs object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


{-| Description of the taxonomy. This field is equivalent to WP\_Taxonomy-&gt;description
-}
description : SelectionSet (Maybe String) Wordpress.Object.Taxonomy
description =
    Object.selectionForField "(Maybe String)" "description" [] (Decode.string |> Decode.nullable)


{-| The plural name of the post type within the GraphQL Schema.
-}
graphqlPluralName : SelectionSet (Maybe String) Wordpress.Object.Taxonomy
graphqlPluralName =
    Object.selectionForField "(Maybe String)" "graphqlPluralName" [] (Decode.string |> Decode.nullable)


{-| The singular name of the post type within the GraphQL Schema.
-}
graphqlSingleName : SelectionSet (Maybe String) Wordpress.Object.Taxonomy
graphqlSingleName =
    Object.selectionForField "(Maybe String)" "graphqlSingleName" [] (Decode.string |> Decode.nullable)


{-| Whether the taxonomy is hierarchical
-}
hierarchical : SelectionSet (Maybe Bool) Wordpress.Object.Taxonomy
hierarchical =
    Object.selectionForField "(Maybe Bool)" "hierarchical" [] (Decode.bool |> Decode.nullable)


{-| -}
id : SelectionSet Wordpress.ScalarCodecs.Id Wordpress.Object.Taxonomy
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Name of the taxonomy shown in the menu. Usually plural.
-}
label : SelectionSet (Maybe String) Wordpress.Object.Taxonomy
label =
    Object.selectionForField "(Maybe String)" "label" [] (Decode.string |> Decode.nullable)


{-| The display name of the taxonomy. This field is equivalent to WP\_Taxonomy-&gt;label
-}
name : SelectionSet (Maybe String) Wordpress.Object.Taxonomy
name =
    Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


{-| Whether the taxonomy is publicly queryable
-}
public : SelectionSet (Maybe Bool) Wordpress.Object.Taxonomy
public =
    Object.selectionForField "(Maybe Bool)" "public" [] (Decode.bool |> Decode.nullable)


{-| Name of content type to diplay in REST API &quot;wp/v2&quot; namespace.
-}
restBase : SelectionSet (Maybe String) Wordpress.Object.Taxonomy
restBase =
    Object.selectionForField "(Maybe String)" "restBase" [] (Decode.string |> Decode.nullable)


{-| The REST Controller class assigned to handling this content type.
-}
restControllerClass : SelectionSet (Maybe String) Wordpress.Object.Taxonomy
restControllerClass =
    Object.selectionForField "(Maybe String)" "restControllerClass" [] (Decode.string |> Decode.nullable)


{-| Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP\_Taxonomy-&gt;show\_tagcloud
-}
showCloud : SelectionSet (Maybe Bool) Wordpress.Object.Taxonomy
showCloud =
    Object.selectionForField "(Maybe Bool)" "showCloud" [] (Decode.bool |> Decode.nullable)


{-| Whether to display a column for the taxonomy on its post type listing screens.
-}
showInAdminColumn : SelectionSet (Maybe Bool) Wordpress.Object.Taxonomy
showInAdminColumn =
    Object.selectionForField "(Maybe Bool)" "showInAdminColumn" [] (Decode.bool |> Decode.nullable)


{-| Whether to add the post type to the GraphQL Schema.
-}
showInGraphql : SelectionSet (Maybe Bool) Wordpress.Object.Taxonomy
showInGraphql =
    Object.selectionForField "(Maybe Bool)" "showInGraphql" [] (Decode.bool |> Decode.nullable)


{-| Whether to show the taxonomy in the admin menu
-}
showInMenu : SelectionSet (Maybe Bool) Wordpress.Object.Taxonomy
showInMenu =
    Object.selectionForField "(Maybe Bool)" "showInMenu" [] (Decode.bool |> Decode.nullable)


{-| Whether the taxonomy is available for selection in navigation menus.
-}
showInNavMenus : SelectionSet (Maybe Bool) Wordpress.Object.Taxonomy
showInNavMenus =
    Object.selectionForField "(Maybe Bool)" "showInNavMenus" [] (Decode.bool |> Decode.nullable)


{-| Whether to show the taxonomy in the quick/bulk edit panel.
-}
showInQuickEdit : SelectionSet (Maybe Bool) Wordpress.Object.Taxonomy
showInQuickEdit =
    Object.selectionForField "(Maybe Bool)" "showInQuickEdit" [] (Decode.bool |> Decode.nullable)


{-| Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace.
-}
showInRest : SelectionSet (Maybe Bool) Wordpress.Object.Taxonomy
showInRest =
    Object.selectionForField "(Maybe Bool)" "showInRest" [] (Decode.bool |> Decode.nullable)


{-| Whether to generate and allow a UI for managing terms in this taxonomy in the admin
-}
showUi : SelectionSet (Maybe Bool) Wordpress.Object.Taxonomy
showUi =
    Object.selectionForField "(Maybe Bool)" "showUi" [] (Decode.bool |> Decode.nullable)
