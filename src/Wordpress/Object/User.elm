-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Wordpress.Object.User exposing (AvatarOptionalArguments, CommentsOptionalArguments, MediaItemsOptionalArguments, PagesOptionalArguments, PostsOptionalArguments, RevisionsOptionalArguments, avatar, capKey, capabilities, comments, description, email, extraCapabilities, firstName, id, isJwtAuthSecretRevoked, jwtAuthExpiration, jwtAuthToken, jwtRefreshToken, jwtUserSecret, lastName, locale, mediaItems, name, nicename, nickname, pages, posts, registeredDate, revisions, roles, slug, url, userId, username)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Wordpress.Enum.AvatarRatingEnum
import Wordpress.InputObject
import Wordpress.Interface
import Wordpress.Object
import Wordpress.Scalar
import Wordpress.ScalarCodecs
import Wordpress.Union


type alias AvatarOptionalArguments =
    { size : OptionalArgument Int
    , forceDefault : OptionalArgument Bool
    , rating : OptionalArgument Wordpress.Enum.AvatarRatingEnum.AvatarRatingEnum
    }


{-| Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.

  - size - The size attribute of the avatar field can be used to fetch avatars of different sizes. The value corresponds to the dimension in pixels to fetch. The default is 96 pixels.
  - forceDefault - Whether to always show the default image, never the Gravatar. Default false

-}
avatar : (AvatarOptionalArguments -> AvatarOptionalArguments) -> SelectionSet decodesTo Wordpress.Object.Avatar -> SelectionSet (Maybe decodesTo) Wordpress.Object.User
avatar fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { size = Absent, forceDefault = Absent, rating = Absent }

        optionalArgs =
            [ Argument.optional "size" filledInOptionals.size Encode.int, Argument.optional "forceDefault" filledInOptionals.forceDefault Encode.bool, Argument.optional "rating" filledInOptionals.rating (Encode.enum Wordpress.Enum.AvatarRatingEnum.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "avatar" optionalArgs object_ (identity >> Decode.nullable)


{-| This field is the id of the user. The id of the user matches WP\_User-&gt;ID field and the value in the ID column for the &quot;users&quot; table in SQL.
-}
capabilities : SelectionSet (Maybe (List (Maybe String))) Wordpress.Object.User
capabilities =
    Object.selectionForField "(Maybe (List (Maybe String)))" "capabilities" [] (Decode.string |> Decode.nullable |> Decode.list |> Decode.nullable)


{-| User metadata option name. Usually it will be &quot;wp\_capabilities&quot;.
-}
capKey : SelectionSet (Maybe String) Wordpress.Object.User
capKey =
    Object.selectionForField "(Maybe String)" "capKey" [] (Decode.string |> Decode.nullable)


type alias CommentsOptionalArguments =
    { first : OptionalArgument Int
    , last : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , where_ : OptionalArgument Wordpress.InputObject.UserToCommentConnectionWhereArgs
    }


{-| Connection between the User type and the User type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where\_ - Arguments for filtering the connection

-}
comments : (CommentsOptionalArguments -> CommentsOptionalArguments) -> SelectionSet decodesTo Wordpress.Object.UserToCommentConnection -> SelectionSet (Maybe decodesTo) Wordpress.Object.User
comments fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "where" filledInOptionals.where_ Wordpress.InputObject.encodeUserToCommentConnectionWhereArgs ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "comments" optionalArgs object_ (identity >> Decode.nullable)


{-| Description of the user.
-}
description : SelectionSet (Maybe String) Wordpress.Object.User
description =
    Object.selectionForField "(Maybe String)" "description" [] (Decode.string |> Decode.nullable)


{-| Email of the user. This is equivalent to the WP\_User-&gt;user\_email property.
-}
email : SelectionSet (Maybe String) Wordpress.Object.User
email =
    Object.selectionForField "(Maybe String)" "email" [] (Decode.string |> Decode.nullable)


{-| A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP\_User-&gt;allcaps.
-}
extraCapabilities : SelectionSet (Maybe (List (Maybe String))) Wordpress.Object.User
extraCapabilities =
    Object.selectionForField "(Maybe (List (Maybe String)))" "extraCapabilities" [] (Decode.string |> Decode.nullable |> Decode.list |> Decode.nullable)


{-| First name of the user. This is equivalent to the WP\_User-&gt;user\_first\_name property.
-}
firstName : SelectionSet (Maybe String) Wordpress.Object.User
firstName =
    Object.selectionForField "(Maybe String)" "firstName" [] (Decode.string |> Decode.nullable)


{-| The globally unique identifier for the user
-}
id : SelectionSet Wordpress.ScalarCodecs.Id Wordpress.Object.User
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Whether the JWT User secret has been revoked. If the secret has been revoked, auth tokens will not be issued until an admin, or user with proper capabilities re-issues a secret for the user.
-}
isJwtAuthSecretRevoked : SelectionSet Bool Wordpress.Object.User
isJwtAuthSecretRevoked =
    Object.selectionForField "Bool" "isJwtAuthSecretRevoked" [] Decode.bool


{-| The expiration for the JWT Token for the user. If not set custom for the user, it will use the default sitewide expiration setting
-}
jwtAuthExpiration : SelectionSet (Maybe String) Wordpress.Object.User
jwtAuthExpiration =
    Object.selectionForField "(Maybe String)" "jwtAuthExpiration" [] (Decode.string |> Decode.nullable)


{-| A JWT token that can be used in future requests for authentication/authorization
-}
jwtAuthToken : SelectionSet (Maybe String) Wordpress.Object.User
jwtAuthToken =
    Object.selectionForField "(Maybe String)" "jwtAuthToken" [] (Decode.string |> Decode.nullable)


{-| A JWT token that can be used in future requests to get a refreshed jwtAuthToken. If the refresh token used in a request is revoked or otherwise invalid, a valid Auth token will NOT be issued in the response headers.
-}
jwtRefreshToken : SelectionSet (Maybe String) Wordpress.Object.User
jwtRefreshToken =
    Object.selectionForField "(Maybe String)" "jwtRefreshToken" [] (Decode.string |> Decode.nullable)


{-| A unique secret tied to the users JWT token that can be revoked or refreshed. Revoking the secret prevents JWT tokens from being issued to the user. Refreshing the token invalidates previously issued tokens, but allows new tokens to be issued.
-}
jwtUserSecret : SelectionSet (Maybe String) Wordpress.Object.User
jwtUserSecret =
    Object.selectionForField "(Maybe String)" "jwtUserSecret" [] (Decode.string |> Decode.nullable)


{-| Last name of the user. This is equivalent to the WP\_User-&gt;user\_last\_name property.
-}
lastName : SelectionSet (Maybe String) Wordpress.Object.User
lastName =
    Object.selectionForField "(Maybe String)" "lastName" [] (Decode.string |> Decode.nullable)


{-| The preferred language locale set for the user. Value derived from get\_user\_locale().
-}
locale : SelectionSet (Maybe String) Wordpress.Object.User
locale =
    Object.selectionForField "(Maybe String)" "locale" [] (Decode.string |> Decode.nullable)


type alias MediaItemsOptionalArguments =
    { first : OptionalArgument Int
    , last : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , where_ : OptionalArgument Wordpress.InputObject.UserToMediaItemConnectionWhereArgs
    }


{-| Connection between the User type and the User type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where\_ - Arguments for filtering the connection

-}
mediaItems : (MediaItemsOptionalArguments -> MediaItemsOptionalArguments) -> SelectionSet decodesTo Wordpress.Object.UserToMediaItemConnection -> SelectionSet (Maybe decodesTo) Wordpress.Object.User
mediaItems fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "where" filledInOptionals.where_ Wordpress.InputObject.encodeUserToMediaItemConnectionWhereArgs ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "mediaItems" optionalArgs object_ (identity >> Decode.nullable)


{-| Display name of the user. This is equivalent to the WP\_User-&gt;dispaly\_name property.
-}
name : SelectionSet (Maybe String) Wordpress.Object.User
name =
    Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


{-| The nicename for the user. This field is equivalent to WP\_User-&gt;user\_nicename
-}
nicename : SelectionSet (Maybe String) Wordpress.Object.User
nicename =
    Object.selectionForField "(Maybe String)" "nicename" [] (Decode.string |> Decode.nullable)


{-| Nickname of the user.
-}
nickname : SelectionSet (Maybe String) Wordpress.Object.User
nickname =
    Object.selectionForField "(Maybe String)" "nickname" [] (Decode.string |> Decode.nullable)


type alias PagesOptionalArguments =
    { first : OptionalArgument Int
    , last : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , where_ : OptionalArgument Wordpress.InputObject.UserToPageConnectionWhereArgs
    }


{-| Connection between the User type and the User type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where\_ - Arguments for filtering the connection

-}
pages : (PagesOptionalArguments -> PagesOptionalArguments) -> SelectionSet decodesTo Wordpress.Object.UserToPageConnection -> SelectionSet (Maybe decodesTo) Wordpress.Object.User
pages fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "where" filledInOptionals.where_ Wordpress.InputObject.encodeUserToPageConnectionWhereArgs ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "pages" optionalArgs object_ (identity >> Decode.nullable)


type alias PostsOptionalArguments =
    { first : OptionalArgument Int
    , last : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , where_ : OptionalArgument Wordpress.InputObject.UserToPostConnectionWhereArgs
    }


{-| Connection between the User type and the User type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where\_ - Arguments for filtering the connection

-}
posts : (PostsOptionalArguments -> PostsOptionalArguments) -> SelectionSet decodesTo Wordpress.Object.UserToPostConnection -> SelectionSet (Maybe decodesTo) Wordpress.Object.User
posts fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "where" filledInOptionals.where_ Wordpress.InputObject.encodeUserToPostConnectionWhereArgs ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "posts" optionalArgs object_ (identity >> Decode.nullable)


{-| The date the user registered or was created. The field follows a full ISO8601 date string format.
-}
registeredDate : SelectionSet (Maybe String) Wordpress.Object.User
registeredDate =
    Object.selectionForField "(Maybe String)" "registeredDate" [] (Decode.string |> Decode.nullable)


type alias RevisionsOptionalArguments =
    { first : OptionalArgument Int
    , last : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , where_ : OptionalArgument Wordpress.InputObject.UserToRevisionConnectionWhereArgs
    }


{-| Connection between the User type and the User type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where\_ - Arguments for filtering the connection

-}
revisions : (RevisionsOptionalArguments -> RevisionsOptionalArguments) -> SelectionSet decodesTo Wordpress.Object.UserToRevisionConnection -> SelectionSet (Maybe decodesTo) Wordpress.Object.User
revisions fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "where" filledInOptionals.where_ Wordpress.InputObject.encodeUserToRevisionConnectionWhereArgs ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "revisions" optionalArgs object_ (identity >> Decode.nullable)


{-| A list of roles that the user has. Roles can be used for querying for certain types of users, but should not be used in permissions checks.
-}
roles : SelectionSet (Maybe (List (Maybe String))) Wordpress.Object.User
roles =
    Object.selectionForField "(Maybe (List (Maybe String)))" "roles" [] (Decode.string |> Decode.nullable |> Decode.list |> Decode.nullable)


{-| The slug for the user. This field is equivalent to WP\_User-&gt;user\_nicename
-}
slug : SelectionSet (Maybe String) Wordpress.Object.User
slug =
    Object.selectionForField "(Maybe String)" "slug" [] (Decode.string |> Decode.nullable)


{-| A website url that is associated with the user.
-}
url : SelectionSet (Maybe String) Wordpress.Object.User
url =
    Object.selectionForField "(Maybe String)" "url" [] (Decode.string |> Decode.nullable)


{-| The Id of the user. Equivelant to WP\_User-&gt;ID
-}
userId : SelectionSet (Maybe Int) Wordpress.Object.User
userId =
    Object.selectionForField "(Maybe Int)" "userId" [] (Decode.int |> Decode.nullable)


{-| Username for the user. This field is equivalent to WP\_User-&gt;user\_login.
-}
username : SelectionSet (Maybe String) Wordpress.Object.User
username =
    Object.selectionForField "(Maybe String)" "username" [] (Decode.string |> Decode.nullable)
