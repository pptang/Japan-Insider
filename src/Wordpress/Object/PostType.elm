-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Wordpress.Object.PostType exposing (ConnectedTaxonomiesOptionalArguments, ConnectedTaxonomyNamesOptionalArguments, canExport, connectedTaxonomies, connectedTaxonomyNames, deleteWithUser, description, excludeFromSearch, graphqlPluralName, graphqlSingleName, hasArchive, hierarchical, id, label, labels, menuIcon, menuPosition, name, public, publiclyQueryable, restBase, restControllerClass, showInAdminBar, showInGraphql, showInMenu, showInNavMenus, showInRest, showUi)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Wordpress.Enum.TaxonomyEnum
import Wordpress.InputObject
import Wordpress.Interface
import Wordpress.Object
import Wordpress.Scalar
import Wordpress.ScalarCodecs
import Wordpress.Union


{-| Whether this content type should can be exported.
-}
canExport : SelectionSet (Maybe Bool) Wordpress.Object.PostType
canExport =
    Object.selectionForField "(Maybe Bool)" "canExport" [] (Decode.bool |> Decode.nullable)


type alias ConnectedTaxonomiesOptionalArguments =
    { taxonomies : OptionalArgument (List (Maybe Wordpress.Enum.TaxonomyEnum.TaxonomyEnum)) }


{-| List of Taxonomies connected to the Post Type

  - taxonomies - Select which taxonomies to limit the results to

-}
connectedTaxonomies : (ConnectedTaxonomiesOptionalArguments -> ConnectedTaxonomiesOptionalArguments) -> SelectionSet decodesTo Wordpress.Object.Taxonomy -> SelectionSet (Maybe (List (Maybe decodesTo))) Wordpress.Object.PostType
connectedTaxonomies fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { taxonomies = Absent }

        optionalArgs =
            [ Argument.optional "taxonomies" filledInOptionals.taxonomies (Encode.enum Wordpress.Enum.TaxonomyEnum.toString |> Encode.maybe |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "connectedTaxonomies" optionalArgs object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias ConnectedTaxonomyNamesOptionalArguments =
    { taxonomies : OptionalArgument (List (Maybe Wordpress.Enum.TaxonomyEnum.TaxonomyEnum)) }


{-| A list of Taxonomies associated with the post type

  - taxonomies - Select which taxonomies to limit the results to

-}
connectedTaxonomyNames : (ConnectedTaxonomyNamesOptionalArguments -> ConnectedTaxonomyNamesOptionalArguments) -> SelectionSet (Maybe (List (Maybe String))) Wordpress.Object.PostType
connectedTaxonomyNames fillInOptionals =
    let
        filledInOptionals =
            fillInOptionals { taxonomies = Absent }

        optionalArgs =
            [ Argument.optional "taxonomies" filledInOptionals.taxonomies (Encode.enum Wordpress.Enum.TaxonomyEnum.toString |> Encode.maybe |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForField "(Maybe (List (Maybe String)))" "connectedTaxonomyNames" optionalArgs (Decode.string |> Decode.nullable |> Decode.list |> Decode.nullable)


{-| Whether delete this type of content when the author of it is deleted from the system.
-}
deleteWithUser : SelectionSet (Maybe Bool) Wordpress.Object.PostType
deleteWithUser =
    Object.selectionForField "(Maybe Bool)" "deleteWithUser" [] (Decode.bool |> Decode.nullable)


{-| Description of the content type.
-}
description : SelectionSet (Maybe String) Wordpress.Object.PostType
description =
    Object.selectionForField "(Maybe String)" "description" [] (Decode.string |> Decode.nullable)


{-| Whether to exclude posts with this post type from front end search results.
-}
excludeFromSearch : SelectionSet (Maybe Bool) Wordpress.Object.PostType
excludeFromSearch =
    Object.selectionForField "(Maybe Bool)" "excludeFromSearch" [] (Decode.bool |> Decode.nullable)


{-| The plural name of the post type within the GraphQL Schema.
-}
graphqlPluralName : SelectionSet (Maybe String) Wordpress.Object.PostType
graphqlPluralName =
    Object.selectionForField "(Maybe String)" "graphqlPluralName" [] (Decode.string |> Decode.nullable)


{-| The singular name of the post type within the GraphQL Schema.
-}
graphqlSingleName : SelectionSet (Maybe String) Wordpress.Object.PostType
graphqlSingleName =
    Object.selectionForField "(Maybe String)" "graphqlSingleName" [] (Decode.string |> Decode.nullable)


{-| Whether this content type should have archives. Content archives are generated by type and by date.
-}
hasArchive : SelectionSet (Maybe Bool) Wordpress.Object.PostType
hasArchive =
    Object.selectionForField "(Maybe Bool)" "hasArchive" [] (Decode.bool |> Decode.nullable)


{-| Whether the post type is hierarchical, for example pages.
-}
hierarchical : SelectionSet (Maybe Bool) Wordpress.Object.PostType
hierarchical =
    Object.selectionForField "(Maybe Bool)" "hierarchical" [] (Decode.bool |> Decode.nullable)


{-| -}
id : SelectionSet Wordpress.ScalarCodecs.Id Wordpress.Object.PostType
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Display name of the content type.
-}
label : SelectionSet (Maybe String) Wordpress.Object.PostType
label =
    Object.selectionForField "(Maybe String)" "label" [] (Decode.string |> Decode.nullable)


{-| Details about the post type labels.
-}
labels : SelectionSet decodesTo Wordpress.Object.PostTypeLabelDetails -> SelectionSet (Maybe decodesTo) Wordpress.Object.PostType
labels object_ =
    Object.selectionForCompositeField "labels" [] object_ (identity >> Decode.nullable)


{-| The name of the icon file to display as a menu icon.
-}
menuIcon : SelectionSet (Maybe String) Wordpress.Object.PostType
menuIcon =
    Object.selectionForField "(Maybe String)" "menuIcon" [] (Decode.string |> Decode.nullable)


{-| The position of this post type in the menu. Only applies if show\_in\_menu is true.
-}
menuPosition : SelectionSet (Maybe Int) Wordpress.Object.PostType
menuPosition =
    Object.selectionForField "(Maybe Int)" "menuPosition" [] (Decode.int |> Decode.nullable)


{-| The internal name of the post type. This should not be used for display purposes.
-}
name : SelectionSet (Maybe String) Wordpress.Object.PostType
name =
    Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


{-| Whether a post type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude\_from\_search, publicly\_queryable, show\_ui, and show\_in\_nav\_menus are inherited from public, each does not rely on this relationship and controls a very specific intention.
-}
public : SelectionSet (Maybe Bool) Wordpress.Object.PostType
public =
    Object.selectionForField "(Maybe Bool)" "public" [] (Decode.bool |> Decode.nullable)


{-| Whether queries can be performed on the front end for the post type as part of parse\_request().
-}
publiclyQueryable : SelectionSet (Maybe Bool) Wordpress.Object.PostType
publiclyQueryable =
    Object.selectionForField "(Maybe Bool)" "publiclyQueryable" [] (Decode.bool |> Decode.nullable)


{-| Name of content type to diplay in REST API &quot;wp/v2&quot; namespace.
-}
restBase : SelectionSet (Maybe String) Wordpress.Object.PostType
restBase =
    Object.selectionForField "(Maybe String)" "restBase" [] (Decode.string |> Decode.nullable)


{-| The REST Controller class assigned to handling this content type.
-}
restControllerClass : SelectionSet (Maybe String) Wordpress.Object.PostType
restControllerClass =
    Object.selectionForField "(Maybe String)" "restControllerClass" [] (Decode.string |> Decode.nullable)


{-| Makes this post type available via the admin bar.
-}
showInAdminBar : SelectionSet (Maybe Bool) Wordpress.Object.PostType
showInAdminBar =
    Object.selectionForField "(Maybe Bool)" "showInAdminBar" [] (Decode.bool |> Decode.nullable)


{-| Whether to add the post type to the GraphQL Schema.
-}
showInGraphql : SelectionSet (Maybe Bool) Wordpress.Object.PostType
showInGraphql =
    Object.selectionForField "(Maybe Bool)" "showInGraphql" [] (Decode.bool |> Decode.nullable)


{-| Where to show the post type in the admin menu. To work, $show\_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post\_type=page&quot;), the post type will be placed as a sub-menu of that.
-}
showInMenu : SelectionSet (Maybe Bool) Wordpress.Object.PostType
showInMenu =
    Object.selectionForField "(Maybe Bool)" "showInMenu" [] (Decode.bool |> Decode.nullable)


{-| Makes this post type available for selection in navigation menus.
-}
showInNavMenus : SelectionSet (Maybe Bool) Wordpress.Object.PostType
showInNavMenus =
    Object.selectionForField "(Maybe Bool)" "showInNavMenus" [] (Decode.bool |> Decode.nullable)


{-| Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace.
-}
showInRest : SelectionSet (Maybe Bool) Wordpress.Object.PostType
showInRest =
    Object.selectionForField "(Maybe Bool)" "showInRest" [] (Decode.bool |> Decode.nullable)


{-| Whether to generate and allow a UI for managing this post type in the admin.
-}
showUi : SelectionSet (Maybe Bool) Wordpress.Object.PostType
showUi =
    Object.selectionForField "(Maybe Bool)" "showUi" [] (Decode.bool |> Decode.nullable)
