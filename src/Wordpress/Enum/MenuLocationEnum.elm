-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Wordpress.Enum.MenuLocationEnum exposing (MenuLocationEnum(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


{-| Registered menu locations
-}
type MenuLocationEnum
    = HeaderMenu


list : List MenuLocationEnum
list =
    [ HeaderMenu ]


decoder : Decoder MenuLocationEnum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "HEADER_MENU" ->
                        Decode.succeed HeaderMenu

                    _ ->
                        Decode.fail ("Invalid MenuLocationEnum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : MenuLocationEnum -> String
toString enum =
    case enum of
        HeaderMenu ->
            "HEADER_MENU"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe MenuLocationEnum
fromString enumString =
    case enumString of
        "HEADER_MENU" ->
            Just HeaderMenu

        _ ->
            Nothing
