-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Wordpress.InputObject exposing (CategoryToCategoryConnectionWhereArgs, CategoryToCategoryConnectionWhereArgsOptionalFields, CategoryToPostConnectionWhereArgs, CategoryToPostConnectionWhereArgsOptionalFields, CommentToCommentConnectionWhereArgs, CommentToCommentConnectionWhereArgsOptionalFields, CreateCategoryInput, CreateCategoryInputOptionalFields, CreateCategoryInputRequiredFields, CreateCommentInput, CreateCommentInputOptionalFields, CreateCommentInputRequiredFields, CreateMediaItemInput, CreateMediaItemInputOptionalFields, CreateMediaItemInputRequiredFields, CreatePageInput, CreatePageInputOptionalFields, CreatePageInputRequiredFields, CreatePostInput(..), CreatePostInputOptionalFields, CreatePostInputRaw, CreatePostInputRequiredFields, CreateTagInput, CreateTagInputOptionalFields, CreateTagInputRequiredFields, CreateUserInput, CreateUserInputOptionalFields, CreateUserInputRequiredFields, DateInput, DateInputOptionalFields, DateQueryInput, DateQueryInputOptionalFields, DeleteCategoryInput, DeleteCategoryInputRequiredFields, DeleteCommentInput, DeleteCommentInputOptionalFields, DeleteCommentInputRequiredFields, DeleteMediaItemInput, DeleteMediaItemInputOptionalFields, DeleteMediaItemInputRequiredFields, DeletePageInput, DeletePageInputOptionalFields, DeletePageInputRequiredFields, DeletePostInput, DeletePostInputOptionalFields, DeletePostInputRequiredFields, DeleteRevisionInput, DeleteRevisionInputOptionalFields, DeleteRevisionInputRequiredFields, DeleteTagInput, DeleteTagInputRequiredFields, DeleteUserInput, DeleteUserInputOptionalFields, DeleteUserInputRequiredFields, LoginInput, LoginInputRequiredFields, MediaItemToCommentConnectionWhereArgs, MediaItemToCommentConnectionWhereArgsOptionalFields, MenuItemToMenuItemConnectionWhereArgs, MenuItemToMenuItemConnectionWhereArgsOptionalFields, MenuToMenuItemConnectionWhereArgs, MenuToMenuItemConnectionWhereArgsOptionalFields, PageToCommentConnectionWhereArgs, PageToCommentConnectionWhereArgsOptionalFields, PageToPageConnectionWhereArgs, PageToPageConnectionWhereArgsOptionalFields, PostCategoriesInput, PostCategoriesInputOptionalFields, PostCategoriesNodeInput, PostCategoriesNodeInputOptionalFields, PostObjectsConnectionOrderbyInput, PostObjectsConnectionOrderbyInputOptionalFields, PostObjectsConnectionOrderbyInputRequiredFields, PostTagsInput, PostTagsInputOptionalFields, PostTagsNodeInput, PostTagsNodeInputOptionalFields, PostToCategoryConnectionWhereArgs, PostToCategoryConnectionWhereArgsOptionalFields, PostToCommentConnectionWhereArgs, PostToCommentConnectionWhereArgsOptionalFields, PostToTagConnectionWhereArgs, PostToTagConnectionWhereArgsOptionalFields, RefreshJwtAuthTokenInput, RefreshJwtAuthTokenInputRequiredFields, RegisterUserInput, RegisterUserInputOptionalFields, RegisterUserInputRequiredFields, ResetUserPasswordInput, ResetUserPasswordInputOptionalFields, ResetUserPasswordInputRequiredFields, RestoreCommentInput, RestoreCommentInputRequiredFields, RootQueryToCategoryConnectionWhereArgs, RootQueryToCategoryConnectionWhereArgsOptionalFields, RootQueryToCommentConnectionWhereArgs, RootQueryToCommentConnectionWhereArgsOptionalFields, RootQueryToMediaItemConnectionWhereArgs, RootQueryToMediaItemConnectionWhereArgsOptionalFields, RootQueryToMenuConnectionWhereArgs, RootQueryToMenuConnectionWhereArgsOptionalFields, RootQueryToMenuItemConnectionWhereArgs, RootQueryToMenuItemConnectionWhereArgsOptionalFields, RootQueryToPageConnectionWhereArgs, RootQueryToPageConnectionWhereArgsOptionalFields, RootQueryToPostConnectionWhereArgs, RootQueryToPostConnectionWhereArgsOptionalFields, RootQueryToRevisionConnectionWhereArgs, RootQueryToRevisionConnectionWhereArgsOptionalFields, RootQueryToTagConnectionWhereArgs, RootQueryToTagConnectionWhereArgsOptionalFields, RootQueryToUserConnectionWhereArgs, RootQueryToUserConnectionWhereArgsOptionalFields, SendPasswordResetEmailInput, SendPasswordResetEmailInputRequiredFields, TagToPostConnectionWhereArgs, TagToPostConnectionWhereArgsOptionalFields, UpdateCategoryInput, UpdateCategoryInputOptionalFields, UpdateCategoryInputRequiredFields, UpdateCommentInput, UpdateCommentInputOptionalFields, UpdateCommentInputRequiredFields, UpdateMediaItemInput, UpdateMediaItemInputOptionalFields, UpdateMediaItemInputRequiredFields, UpdatePageInput, UpdatePageInputOptionalFields, UpdatePageInputRequiredFields, UpdatePostInput(..), UpdatePostInputOptionalFields, UpdatePostInputRaw, UpdatePostInputRequiredFields, UpdateSettingsInput, UpdateSettingsInputOptionalFields, UpdateSettingsInputRequiredFields, UpdateTagInput, UpdateTagInputOptionalFields, UpdateTagInputRequiredFields, UpdateUserInput, UpdateUserInputOptionalFields, UpdateUserInputRequiredFields, UserToCommentConnectionWhereArgs, UserToCommentConnectionWhereArgsOptionalFields, UserToMediaItemConnectionWhereArgs, UserToMediaItemConnectionWhereArgsOptionalFields, UserToPageConnectionWhereArgs, UserToPageConnectionWhereArgsOptionalFields, UserToPostConnectionWhereArgs, UserToPostConnectionWhereArgsOptionalFields, UserToRevisionConnectionWhereArgs, UserToRevisionConnectionWhereArgsOptionalFields, buildCategoryToCategoryConnectionWhereArgs, buildCategoryToPostConnectionWhereArgs, buildCommentToCommentConnectionWhereArgs, buildCreateCategoryInput, buildCreateCommentInput, buildCreateMediaItemInput, buildCreatePageInput, buildCreatePostInput, buildCreateTagInput, buildCreateUserInput, buildDateInput, buildDateQueryInput, buildDeleteCategoryInput, buildDeleteCommentInput, buildDeleteMediaItemInput, buildDeletePageInput, buildDeletePostInput, buildDeleteRevisionInput, buildDeleteTagInput, buildDeleteUserInput, buildLoginInput, buildMediaItemToCommentConnectionWhereArgs, buildMenuItemToMenuItemConnectionWhereArgs, buildMenuToMenuItemConnectionWhereArgs, buildPageToCommentConnectionWhereArgs, buildPageToPageConnectionWhereArgs, buildPostCategoriesInput, buildPostCategoriesNodeInput, buildPostObjectsConnectionOrderbyInput, buildPostTagsInput, buildPostTagsNodeInput, buildPostToCategoryConnectionWhereArgs, buildPostToCommentConnectionWhereArgs, buildPostToTagConnectionWhereArgs, buildRefreshJwtAuthTokenInput, buildRegisterUserInput, buildResetUserPasswordInput, buildRestoreCommentInput, buildRootQueryToCategoryConnectionWhereArgs, buildRootQueryToCommentConnectionWhereArgs, buildRootQueryToMediaItemConnectionWhereArgs, buildRootQueryToMenuConnectionWhereArgs, buildRootQueryToMenuItemConnectionWhereArgs, buildRootQueryToPageConnectionWhereArgs, buildRootQueryToPostConnectionWhereArgs, buildRootQueryToRevisionConnectionWhereArgs, buildRootQueryToTagConnectionWhereArgs, buildRootQueryToUserConnectionWhereArgs, buildSendPasswordResetEmailInput, buildTagToPostConnectionWhereArgs, buildUpdateCategoryInput, buildUpdateCommentInput, buildUpdateMediaItemInput, buildUpdatePageInput, buildUpdatePostInput, buildUpdateSettingsInput, buildUpdateTagInput, buildUpdateUserInput, buildUserToCommentConnectionWhereArgs, buildUserToMediaItemConnectionWhereArgs, buildUserToPageConnectionWhereArgs, buildUserToPostConnectionWhereArgs, buildUserToRevisionConnectionWhereArgs, encodeCategoryToCategoryConnectionWhereArgs, encodeCategoryToPostConnectionWhereArgs, encodeCommentToCommentConnectionWhereArgs, encodeCreateCategoryInput, encodeCreateCommentInput, encodeCreateMediaItemInput, encodeCreatePageInput, encodeCreatePostInput, encodeCreateTagInput, encodeCreateUserInput, encodeDateInput, encodeDateQueryInput, encodeDeleteCategoryInput, encodeDeleteCommentInput, encodeDeleteMediaItemInput, encodeDeletePageInput, encodeDeletePostInput, encodeDeleteRevisionInput, encodeDeleteTagInput, encodeDeleteUserInput, encodeLoginInput, encodeMediaItemToCommentConnectionWhereArgs, encodeMenuItemToMenuItemConnectionWhereArgs, encodeMenuToMenuItemConnectionWhereArgs, encodePageToCommentConnectionWhereArgs, encodePageToPageConnectionWhereArgs, encodePostCategoriesInput, encodePostCategoriesNodeInput, encodePostObjectsConnectionOrderbyInput, encodePostTagsInput, encodePostTagsNodeInput, encodePostToCategoryConnectionWhereArgs, encodePostToCommentConnectionWhereArgs, encodePostToTagConnectionWhereArgs, encodeRefreshJwtAuthTokenInput, encodeRegisterUserInput, encodeResetUserPasswordInput, encodeRestoreCommentInput, encodeRootQueryToCategoryConnectionWhereArgs, encodeRootQueryToCommentConnectionWhereArgs, encodeRootQueryToMediaItemConnectionWhereArgs, encodeRootQueryToMenuConnectionWhereArgs, encodeRootQueryToMenuItemConnectionWhereArgs, encodeRootQueryToPageConnectionWhereArgs, encodeRootQueryToPostConnectionWhereArgs, encodeRootQueryToRevisionConnectionWhereArgs, encodeRootQueryToTagConnectionWhereArgs, encodeRootQueryToUserConnectionWhereArgs, encodeSendPasswordResetEmailInput, encodeTagToPostConnectionWhereArgs, encodeUpdateCategoryInput, encodeUpdateCommentInput, encodeUpdateMediaItemInput, encodeUpdatePageInput, encodeUpdatePostInput, encodeUpdateSettingsInput, encodeUpdateTagInput, encodeUpdateUserInput, encodeUserToCommentConnectionWhereArgs, encodeUserToMediaItemConnectionWhereArgs, encodeUserToPageConnectionWhereArgs, encodeUserToPostConnectionWhereArgs, encodeUserToRevisionConnectionWhereArgs)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Wordpress.Enum.CommentsConnectionOrderbyEnum
import Wordpress.Enum.MediaItemStatusEnum
import Wordpress.Enum.MenuLocationEnum
import Wordpress.Enum.MimeTypeEnum
import Wordpress.Enum.OrderEnum
import Wordpress.Enum.PostObjectsConnectionDateColumnEnum
import Wordpress.Enum.PostObjectsConnectionOrderbyEnum
import Wordpress.Enum.PostStatusEnum
import Wordpress.Enum.PostTypeEnum
import Wordpress.Enum.RelationEnum
import Wordpress.Enum.TermObjectsConnectionOrderbyEnum
import Wordpress.Enum.UserRoleEnum
import Wordpress.Enum.UsersConnectionSearchColumnEnum
import Wordpress.Interface
import Wordpress.Object
import Wordpress.Scalar
import Wordpress.ScalarCodecs
import Wordpress.Union


buildCategoryToCategoryConnectionWhereArgs : (CategoryToCategoryConnectionWhereArgsOptionalFields -> CategoryToCategoryConnectionWhereArgsOptionalFields) -> CategoryToCategoryConnectionWhereArgs
buildCategoryToCategoryConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { cacheDomain = Absent, childless = Absent, childOf = Absent, descriptionLike = Absent, exclude = Absent, excludeTree = Absent, hideEmpty = Absent, hierarchical = Absent, include = Absent, name = Absent, nameLike = Absent, objectIds = Absent, orderby = Absent, padCounts = Absent, parent = Absent, search = Absent, shouldOnlyIncludeConnectedItems = Absent, shouldOutputInFlatList = Absent, slug = Absent, termTaxonomId = Absent, updateTermMetaCache = Absent }
    in
    { cacheDomain = optionals.cacheDomain, childless = optionals.childless, childOf = optionals.childOf, descriptionLike = optionals.descriptionLike, exclude = optionals.exclude, excludeTree = optionals.excludeTree, hideEmpty = optionals.hideEmpty, hierarchical = optionals.hierarchical, include = optionals.include, name = optionals.name, nameLike = optionals.nameLike, objectIds = optionals.objectIds, orderby = optionals.orderby, padCounts = optionals.padCounts, parent = optionals.parent, search = optionals.search, shouldOnlyIncludeConnectedItems = optionals.shouldOnlyIncludeConnectedItems, shouldOutputInFlatList = optionals.shouldOutputInFlatList, slug = optionals.slug, termTaxonomId = optionals.termTaxonomId, updateTermMetaCache = optionals.updateTermMetaCache }


type alias CategoryToCategoryConnectionWhereArgsOptionalFields =
    { cacheDomain : OptionalArgument String
    , childless : OptionalArgument Bool
    , childOf : OptionalArgument Int
    , descriptionLike : OptionalArgument String
    , exclude : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , excludeTree : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , hideEmpty : OptionalArgument Bool
    , hierarchical : OptionalArgument Bool
    , include : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , name : OptionalArgument (List (Maybe String))
    , nameLike : OptionalArgument String
    , objectIds : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument Wordpress.Enum.TermObjectsConnectionOrderbyEnum.TermObjectsConnectionOrderbyEnum
    , padCounts : OptionalArgument Bool
    , parent : OptionalArgument Int
    , search : OptionalArgument String
    , shouldOnlyIncludeConnectedItems : OptionalArgument Bool
    , shouldOutputInFlatList : OptionalArgument Bool
    , slug : OptionalArgument (List (Maybe String))
    , termTaxonomId : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , updateTermMetaCache : OptionalArgument Bool
    }


{-| Type for the CategoryToCategoryConnectionWhereArgs input object.
-}
type alias CategoryToCategoryConnectionWhereArgs =
    { cacheDomain : OptionalArgument String
    , childless : OptionalArgument Bool
    , childOf : OptionalArgument Int
    , descriptionLike : OptionalArgument String
    , exclude : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , excludeTree : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , hideEmpty : OptionalArgument Bool
    , hierarchical : OptionalArgument Bool
    , include : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , name : OptionalArgument (List (Maybe String))
    , nameLike : OptionalArgument String
    , objectIds : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument Wordpress.Enum.TermObjectsConnectionOrderbyEnum.TermObjectsConnectionOrderbyEnum
    , padCounts : OptionalArgument Bool
    , parent : OptionalArgument Int
    , search : OptionalArgument String
    , shouldOnlyIncludeConnectedItems : OptionalArgument Bool
    , shouldOutputInFlatList : OptionalArgument Bool
    , slug : OptionalArgument (List (Maybe String))
    , termTaxonomId : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , updateTermMetaCache : OptionalArgument Bool
    }


{-| Encode a CategoryToCategoryConnectionWhereArgs into a value that can be used as an argument.
-}
encodeCategoryToCategoryConnectionWhereArgs : CategoryToCategoryConnectionWhereArgs -> Value
encodeCategoryToCategoryConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "cacheDomain", Encode.string |> Encode.optional input.cacheDomain ), ( "childless", Encode.bool |> Encode.optional input.childless ), ( "childOf", Encode.int |> Encode.optional input.childOf ), ( "descriptionLike", Encode.string |> Encode.optional input.descriptionLike ), ( "exclude", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.exclude ), ( "excludeTree", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.excludeTree ), ( "hideEmpty", Encode.bool |> Encode.optional input.hideEmpty ), ( "hierarchical", Encode.bool |> Encode.optional input.hierarchical ), ( "include", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.include ), ( "name", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.name ), ( "nameLike", Encode.string |> Encode.optional input.nameLike ), ( "objectIds", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.objectIds ), ( "orderby", Encode.enum Wordpress.Enum.TermObjectsConnectionOrderbyEnum.toString |> Encode.optional input.orderby ), ( "padCounts", Encode.bool |> Encode.optional input.padCounts ), ( "parent", Encode.int |> Encode.optional input.parent ), ( "search", Encode.string |> Encode.optional input.search ), ( "shouldOnlyIncludeConnectedItems", Encode.bool |> Encode.optional input.shouldOnlyIncludeConnectedItems ), ( "shouldOutputInFlatList", Encode.bool |> Encode.optional input.shouldOutputInFlatList ), ( "slug", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.slug ), ( "termTaxonomId", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.termTaxonomId ), ( "updateTermMetaCache", Encode.bool |> Encode.optional input.updateTermMetaCache ) ]


buildCategoryToPostConnectionWhereArgs : (CategoryToPostConnectionWhereArgsOptionalFields -> CategoryToPostConnectionWhereArgsOptionalFields) -> CategoryToPostConnectionWhereArgs
buildCategoryToPostConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { author = Absent, authorIn = Absent, authorName = Absent, authorNotIn = Absent, categoryId = Absent, categoryIn = Absent, categoryName = Absent, categoryNotIn = Absent, dateQuery = Absent, hasPassword = Absent, id = Absent, in_ = Absent, mimeType = Absent, name = Absent, nameIn = Absent, notIn = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, password = Absent, search = Absent, stati = Absent, status = Absent, tag = Absent, tagId = Absent, tagIn = Absent, tagNotIn = Absent, tagSlugAnd = Absent, tagSlugIn = Absent, title = Absent }
    in
    { author = optionals.author, authorIn = optionals.authorIn, authorName = optionals.authorName, authorNotIn = optionals.authorNotIn, categoryId = optionals.categoryId, categoryIn = optionals.categoryIn, categoryName = optionals.categoryName, categoryNotIn = optionals.categoryNotIn, dateQuery = optionals.dateQuery, hasPassword = optionals.hasPassword, id = optionals.id, in_ = optionals.in_, mimeType = optionals.mimeType, name = optionals.name, nameIn = optionals.nameIn, notIn = optionals.notIn, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, password = optionals.password, search = optionals.search, stati = optionals.stati, status = optionals.status, tag = optionals.tag, tagId = optionals.tagId, tagIn = optionals.tagIn, tagNotIn = optionals.tagNotIn, tagSlugAnd = optionals.tagSlugAnd, tagSlugIn = optionals.tagSlugIn, title = optionals.title }


type alias CategoryToPostConnectionWhereArgsOptionalFields =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Type for the CategoryToPostConnectionWhereArgs input object.
-}
type alias CategoryToPostConnectionWhereArgs =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Encode a CategoryToPostConnectionWhereArgs into a value that can be used as an argument.
-}
encodeCategoryToPostConnectionWhereArgs : CategoryToPostConnectionWhereArgs -> Value
encodeCategoryToPostConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "author", Encode.int |> Encode.optional input.author ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorName", Encode.string |> Encode.optional input.authorName ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "categoryId", Encode.int |> Encode.optional input.categoryId ), ( "categoryIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryIn ), ( "categoryName", Encode.string |> Encode.optional input.categoryName ), ( "categoryNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryNotIn ), ( "dateQuery", encodeDateQueryInput |> Encode.optional input.dateQuery ), ( "hasPassword", Encode.bool |> Encode.optional input.hasPassword ), ( "id", Encode.int |> Encode.optional input.id ), ( "in", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.in_ ), ( "mimeType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.mimeType ), ( "name", Encode.string |> Encode.optional input.name ), ( "nameIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.nameIn ), ( "notIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.notIn ), ( "orderby", (encodePostObjectsConnectionOrderbyInput |> Encode.maybe |> Encode.list) |> Encode.optional input.orderby ), ( "parent", Encode.string |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "password", Encode.string |> Encode.optional input.password ), ( "search", Encode.string |> Encode.optional input.search ), ( "stati", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.stati ), ( "status", Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.optional input.status ), ( "tag", Encode.string |> Encode.optional input.tag ), ( "tagId", Encode.string |> Encode.optional input.tagId ), ( "tagIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagIn ), ( "tagNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagNotIn ), ( "tagSlugAnd", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugAnd ), ( "tagSlugIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugIn ), ( "title", Encode.string |> Encode.optional input.title ) ]


buildCommentToCommentConnectionWhereArgs : (CommentToCommentConnectionWhereArgsOptionalFields -> CommentToCommentConnectionWhereArgsOptionalFields) -> CommentToCommentConnectionWhereArgs
buildCommentToCommentConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { authorEmail = Absent, authorIn = Absent, authorNotIn = Absent, authorUrl = Absent, commentIn = Absent, commentNotIn = Absent, commentType = Absent, commentTypeIn = Absent, commentTypeNotIn = Absent, contentAuthor = Absent, contentAuthorIn = Absent, contentAuthorNotIn = Absent, contentId = Absent, contentIdIn = Absent, contentIdNotIn = Absent, contentName = Absent, contentParent = Absent, contentStatus = Absent, contentType = Absent, includeUnapproved = Absent, karma = Absent, order = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, search = Absent, status = Absent, userId = Absent }
    in
    { authorEmail = optionals.authorEmail, authorIn = optionals.authorIn, authorNotIn = optionals.authorNotIn, authorUrl = optionals.authorUrl, commentIn = optionals.commentIn, commentNotIn = optionals.commentNotIn, commentType = optionals.commentType, commentTypeIn = optionals.commentTypeIn, commentTypeNotIn = optionals.commentTypeNotIn, contentAuthor = optionals.contentAuthor, contentAuthorIn = optionals.contentAuthorIn, contentAuthorNotIn = optionals.contentAuthorNotIn, contentId = optionals.contentId, contentIdIn = optionals.contentIdIn, contentIdNotIn = optionals.contentIdNotIn, contentName = optionals.contentName, contentParent = optionals.contentParent, contentStatus = optionals.contentStatus, contentType = optionals.contentType, includeUnapproved = optionals.includeUnapproved, karma = optionals.karma, order = optionals.order, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, search = optionals.search, status = optionals.status, userId = optionals.userId }


type alias CommentToCommentConnectionWhereArgsOptionalFields =
    { authorEmail : OptionalArgument String
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorUrl : OptionalArgument String
    , commentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentType : OptionalArgument String
    , commentTypeIn : OptionalArgument (List (Maybe String))
    , commentTypeNotIn : OptionalArgument String
    , contentAuthor : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , contentIdIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentIdNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentName : OptionalArgument String
    , contentParent : OptionalArgument Int
    , contentStatus : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , contentType : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , includeUnapproved : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , karma : OptionalArgument Int
    , order : OptionalArgument Wordpress.Enum.OrderEnum.OrderEnum
    , orderby : OptionalArgument Wordpress.Enum.CommentsConnectionOrderbyEnum.CommentsConnectionOrderbyEnum
    , parent : OptionalArgument Int
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , search : OptionalArgument String
    , status : OptionalArgument String
    , userId : OptionalArgument Wordpress.ScalarCodecs.Id
    }


{-| Type for the CommentToCommentConnectionWhereArgs input object.
-}
type alias CommentToCommentConnectionWhereArgs =
    { authorEmail : OptionalArgument String
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorUrl : OptionalArgument String
    , commentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentType : OptionalArgument String
    , commentTypeIn : OptionalArgument (List (Maybe String))
    , commentTypeNotIn : OptionalArgument String
    , contentAuthor : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , contentIdIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentIdNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentName : OptionalArgument String
    , contentParent : OptionalArgument Int
    , contentStatus : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , contentType : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , includeUnapproved : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , karma : OptionalArgument Int
    , order : OptionalArgument Wordpress.Enum.OrderEnum.OrderEnum
    , orderby : OptionalArgument Wordpress.Enum.CommentsConnectionOrderbyEnum.CommentsConnectionOrderbyEnum
    , parent : OptionalArgument Int
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , search : OptionalArgument String
    , status : OptionalArgument String
    , userId : OptionalArgument Wordpress.ScalarCodecs.Id
    }


{-| Encode a CommentToCommentConnectionWhereArgs into a value that can be used as an argument.
-}
encodeCommentToCommentConnectionWhereArgs : CommentToCommentConnectionWhereArgs -> Value
encodeCommentToCommentConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "authorEmail", Encode.string |> Encode.optional input.authorEmail ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "authorUrl", Encode.string |> Encode.optional input.authorUrl ), ( "commentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.commentIn ), ( "commentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.commentNotIn ), ( "commentType", Encode.string |> Encode.optional input.commentType ), ( "commentTypeIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.commentTypeIn ), ( "commentTypeNotIn", Encode.string |> Encode.optional input.commentTypeNotIn ), ( "contentAuthor", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthor ), ( "contentAuthorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthorIn ), ( "contentAuthorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthorNotIn ), ( "contentId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.contentId ), ( "contentIdIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentIdIn ), ( "contentIdNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentIdNotIn ), ( "contentName", Encode.string |> Encode.optional input.contentName ), ( "contentParent", Encode.int |> Encode.optional input.contentParent ), ( "contentStatus", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.contentStatus ), ( "contentType", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.contentType ), ( "includeUnapproved", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.includeUnapproved ), ( "karma", Encode.int |> Encode.optional input.karma ), ( "order", Encode.enum Wordpress.Enum.OrderEnum.toString |> Encode.optional input.order ), ( "orderby", Encode.enum Wordpress.Enum.CommentsConnectionOrderbyEnum.toString |> Encode.optional input.orderby ), ( "parent", Encode.int |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "search", Encode.string |> Encode.optional input.search ), ( "status", Encode.string |> Encode.optional input.status ), ( "userId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.userId ) ]


buildCreateCategoryInput : CreateCategoryInputRequiredFields -> (CreateCategoryInputOptionalFields -> CreateCategoryInputOptionalFields) -> CreateCategoryInput
buildCreateCategoryInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { aliasOf = Absent, description = Absent, parentId = Absent, slug = Absent }
    in
    { aliasOf = optionals.aliasOf, clientMutationId = required.clientMutationId, description = optionals.description, name = required.name, parentId = optionals.parentId, slug = optionals.slug }


type alias CreateCategoryInputRequiredFields =
    { clientMutationId : String
    , name : String
    }


type alias CreateCategoryInputOptionalFields =
    { aliasOf : OptionalArgument String
    , description : OptionalArgument String
    , parentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , slug : OptionalArgument String
    }


{-| Type for the CreateCategoryInput input object.
-}
type alias CreateCategoryInput =
    { aliasOf : OptionalArgument String
    , clientMutationId : String
    , description : OptionalArgument String
    , name : String
    , parentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , slug : OptionalArgument String
    }


{-| Encode a CreateCategoryInput into a value that can be used as an argument.
-}
encodeCreateCategoryInput : CreateCategoryInput -> Value
encodeCreateCategoryInput input =
    Encode.maybeObject
        [ ( "aliasOf", Encode.string |> Encode.optional input.aliasOf ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "name", Encode.string input.name |> Just ), ( "parentId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.parentId ), ( "slug", Encode.string |> Encode.optional input.slug ) ]


buildCreateCommentInput : CreateCommentInputRequiredFields -> (CreateCommentInputOptionalFields -> CreateCommentInputOptionalFields) -> CreateCommentInput
buildCreateCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { agent = Absent, approved = Absent, author = Absent, authorEmail = Absent, authorIp = Absent, authorUrl = Absent, content = Absent, date = Absent, parent = Absent, postId = Absent, type_ = Absent, userId = Absent }
    in
    { agent = optionals.agent, approved = optionals.approved, author = optionals.author, authorEmail = optionals.authorEmail, authorIp = optionals.authorIp, authorUrl = optionals.authorUrl, clientMutationId = required.clientMutationId, content = optionals.content, date = optionals.date, parent = optionals.parent, postId = optionals.postId, type_ = optionals.type_, userId = optionals.userId }


type alias CreateCommentInputRequiredFields =
    { clientMutationId : String }


type alias CreateCommentInputOptionalFields =
    { agent : OptionalArgument String
    , approved : OptionalArgument String
    , author : OptionalArgument String
    , authorEmail : OptionalArgument String
    , authorIp : OptionalArgument String
    , authorUrl : OptionalArgument String
    , content : OptionalArgument String
    , date : OptionalArgument String
    , parent : OptionalArgument Wordpress.ScalarCodecs.Id
    , postId : OptionalArgument Int
    , type_ : OptionalArgument String
    , userId : OptionalArgument Int
    }


{-| Type for the CreateCommentInput input object.
-}
type alias CreateCommentInput =
    { agent : OptionalArgument String
    , approved : OptionalArgument String
    , author : OptionalArgument String
    , authorEmail : OptionalArgument String
    , authorIp : OptionalArgument String
    , authorUrl : OptionalArgument String
    , clientMutationId : String
    , content : OptionalArgument String
    , date : OptionalArgument String
    , parent : OptionalArgument Wordpress.ScalarCodecs.Id
    , postId : OptionalArgument Int
    , type_ : OptionalArgument String
    , userId : OptionalArgument Int
    }


{-| Encode a CreateCommentInput into a value that can be used as an argument.
-}
encodeCreateCommentInput : CreateCommentInput -> Value
encodeCreateCommentInput input =
    Encode.maybeObject
        [ ( "agent", Encode.string |> Encode.optional input.agent ), ( "approved", Encode.string |> Encode.optional input.approved ), ( "author", Encode.string |> Encode.optional input.author ), ( "authorEmail", Encode.string |> Encode.optional input.authorEmail ), ( "authorIp", Encode.string |> Encode.optional input.authorIp ), ( "authorUrl", Encode.string |> Encode.optional input.authorUrl ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "content", Encode.string |> Encode.optional input.content ), ( "date", Encode.string |> Encode.optional input.date ), ( "parent", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.parent ), ( "postId", Encode.int |> Encode.optional input.postId ), ( "type", Encode.string |> Encode.optional input.type_ ), ( "userId", Encode.int |> Encode.optional input.userId ) ]


buildCreateMediaItemInput : CreateMediaItemInputRequiredFields -> (CreateMediaItemInputOptionalFields -> CreateMediaItemInputOptionalFields) -> CreateMediaItemInput
buildCreateMediaItemInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { altText = Absent, authorId = Absent, caption = Absent, commentStatus = Absent, date = Absent, dateGmt = Absent, description = Absent, filePath = Absent, fileType = Absent, parentId = Absent, pingStatus = Absent, slug = Absent, status = Absent, title = Absent }
    in
    { altText = optionals.altText, authorId = optionals.authorId, caption = optionals.caption, clientMutationId = required.clientMutationId, commentStatus = optionals.commentStatus, date = optionals.date, dateGmt = optionals.dateGmt, description = optionals.description, filePath = optionals.filePath, fileType = optionals.fileType, parentId = optionals.parentId, pingStatus = optionals.pingStatus, slug = optionals.slug, status = optionals.status, title = optionals.title }


type alias CreateMediaItemInputRequiredFields =
    { clientMutationId : String }


type alias CreateMediaItemInputOptionalFields =
    { altText : OptionalArgument String
    , authorId : OptionalArgument Wordpress.ScalarCodecs.Id
    , caption : OptionalArgument String
    , commentStatus : OptionalArgument String
    , date : OptionalArgument String
    , dateGmt : OptionalArgument String
    , description : OptionalArgument String
    , filePath : OptionalArgument String
    , fileType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , parentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , pingStatus : OptionalArgument String
    , slug : OptionalArgument String
    , status : OptionalArgument Wordpress.Enum.MediaItemStatusEnum.MediaItemStatusEnum
    , title : OptionalArgument String
    }


{-| Type for the CreateMediaItemInput input object.
-}
type alias CreateMediaItemInput =
    { altText : OptionalArgument String
    , authorId : OptionalArgument Wordpress.ScalarCodecs.Id
    , caption : OptionalArgument String
    , clientMutationId : String
    , commentStatus : OptionalArgument String
    , date : OptionalArgument String
    , dateGmt : OptionalArgument String
    , description : OptionalArgument String
    , filePath : OptionalArgument String
    , fileType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , parentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , pingStatus : OptionalArgument String
    , slug : OptionalArgument String
    , status : OptionalArgument Wordpress.Enum.MediaItemStatusEnum.MediaItemStatusEnum
    , title : OptionalArgument String
    }


{-| Encode a CreateMediaItemInput into a value that can be used as an argument.
-}
encodeCreateMediaItemInput : CreateMediaItemInput -> Value
encodeCreateMediaItemInput input =
    Encode.maybeObject
        [ ( "altText", Encode.string |> Encode.optional input.altText ), ( "authorId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.authorId ), ( "caption", Encode.string |> Encode.optional input.caption ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "commentStatus", Encode.string |> Encode.optional input.commentStatus ), ( "date", Encode.string |> Encode.optional input.date ), ( "dateGmt", Encode.string |> Encode.optional input.dateGmt ), ( "description", Encode.string |> Encode.optional input.description ), ( "filePath", Encode.string |> Encode.optional input.filePath ), ( "fileType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.fileType ), ( "parentId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.parentId ), ( "pingStatus", Encode.string |> Encode.optional input.pingStatus ), ( "slug", Encode.string |> Encode.optional input.slug ), ( "status", Encode.enum Wordpress.Enum.MediaItemStatusEnum.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ) ]


buildCreatePageInput : CreatePageInputRequiredFields -> (CreatePageInputOptionalFields -> CreatePageInputOptionalFields) -> CreatePageInput
buildCreatePageInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { authorId = Absent, commentCount = Absent, commentStatus = Absent, content = Absent, date = Absent, excerpt = Absent, menuOrder = Absent, mimeType = Absent, parentId = Absent, password = Absent, pinged = Absent, pingStatus = Absent, slug = Absent, status = Absent, title = Absent, toPing = Absent }
    in
    { authorId = optionals.authorId, clientMutationId = required.clientMutationId, commentCount = optionals.commentCount, commentStatus = optionals.commentStatus, content = optionals.content, date = optionals.date, excerpt = optionals.excerpt, menuOrder = optionals.menuOrder, mimeType = optionals.mimeType, parentId = optionals.parentId, password = optionals.password, pinged = optionals.pinged, pingStatus = optionals.pingStatus, slug = optionals.slug, status = optionals.status, title = optionals.title, toPing = optionals.toPing }


type alias CreatePageInputRequiredFields =
    { clientMutationId : String }


type alias CreatePageInputOptionalFields =
    { authorId : OptionalArgument Wordpress.ScalarCodecs.Id
    , commentCount : OptionalArgument Int
    , commentStatus : OptionalArgument String
    , content : OptionalArgument String
    , date : OptionalArgument String
    , excerpt : OptionalArgument String
    , menuOrder : OptionalArgument Int
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , parentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , password : OptionalArgument String
    , pinged : OptionalArgument (List (Maybe String))
    , pingStatus : OptionalArgument String
    , slug : OptionalArgument String
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , title : OptionalArgument String
    , toPing : OptionalArgument (List (Maybe String))
    }


{-| Type for the CreatePageInput input object.
-}
type alias CreatePageInput =
    { authorId : OptionalArgument Wordpress.ScalarCodecs.Id
    , clientMutationId : String
    , commentCount : OptionalArgument Int
    , commentStatus : OptionalArgument String
    , content : OptionalArgument String
    , date : OptionalArgument String
    , excerpt : OptionalArgument String
    , menuOrder : OptionalArgument Int
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , parentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , password : OptionalArgument String
    , pinged : OptionalArgument (List (Maybe String))
    , pingStatus : OptionalArgument String
    , slug : OptionalArgument String
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , title : OptionalArgument String
    , toPing : OptionalArgument (List (Maybe String))
    }


{-| Encode a CreatePageInput into a value that can be used as an argument.
-}
encodeCreatePageInput : CreatePageInput -> Value
encodeCreatePageInput input =
    Encode.maybeObject
        [ ( "authorId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.authorId ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "commentCount", Encode.int |> Encode.optional input.commentCount ), ( "commentStatus", Encode.string |> Encode.optional input.commentStatus ), ( "content", Encode.string |> Encode.optional input.content ), ( "date", Encode.string |> Encode.optional input.date ), ( "excerpt", Encode.string |> Encode.optional input.excerpt ), ( "menuOrder", Encode.int |> Encode.optional input.menuOrder ), ( "mimeType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.mimeType ), ( "parentId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.parentId ), ( "password", Encode.string |> Encode.optional input.password ), ( "pinged", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.pinged ), ( "pingStatus", Encode.string |> Encode.optional input.pingStatus ), ( "slug", Encode.string |> Encode.optional input.slug ), ( "status", Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "toPing", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.toPing ) ]


buildCreatePostInput : CreatePostInputRequiredFields -> (CreatePostInputOptionalFields -> CreatePostInputOptionalFields) -> CreatePostInput
buildCreatePostInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { authorId = Absent, categories = Absent, commentCount = Absent, commentStatus = Absent, content = Absent, date = Absent, excerpt = Absent, menuOrder = Absent, mimeType = Absent, parentId = Absent, password = Absent, pinged = Absent, pingStatus = Absent, slug = Absent, status = Absent, tags = Absent, title = Absent, toPing = Absent }
    in
    CreatePostInput { authorId = optionals.authorId, categories = optionals.categories, clientMutationId = required.clientMutationId, commentCount = optionals.commentCount, commentStatus = optionals.commentStatus, content = optionals.content, date = optionals.date, excerpt = optionals.excerpt, menuOrder = optionals.menuOrder, mimeType = optionals.mimeType, parentId = optionals.parentId, password = optionals.password, pinged = optionals.pinged, pingStatus = optionals.pingStatus, slug = optionals.slug, status = optionals.status, tags = optionals.tags, title = optionals.title, toPing = optionals.toPing }


type alias CreatePostInputRequiredFields =
    { clientMutationId : String }


type alias CreatePostInputOptionalFields =
    { authorId : OptionalArgument Wordpress.ScalarCodecs.Id
    , categories : OptionalArgument PostCategoriesInput
    , commentCount : OptionalArgument Int
    , commentStatus : OptionalArgument String
    , content : OptionalArgument String
    , date : OptionalArgument String
    , excerpt : OptionalArgument String
    , menuOrder : OptionalArgument Int
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , parentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , password : OptionalArgument String
    , pinged : OptionalArgument (List (Maybe String))
    , pingStatus : OptionalArgument String
    , slug : OptionalArgument String
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tags : OptionalArgument PostTagsInput
    , title : OptionalArgument String
    , toPing : OptionalArgument (List (Maybe String))
    }


{-| Type alias for the `CreatePostInput` attributes. Note that this type
needs to use the `CreatePostInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias CreatePostInputRaw =
    { authorId : OptionalArgument Wordpress.ScalarCodecs.Id
    , categories : OptionalArgument PostCategoriesInput
    , clientMutationId : String
    , commentCount : OptionalArgument Int
    , commentStatus : OptionalArgument String
    , content : OptionalArgument String
    , date : OptionalArgument String
    , excerpt : OptionalArgument String
    , menuOrder : OptionalArgument Int
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , parentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , password : OptionalArgument String
    , pinged : OptionalArgument (List (Maybe String))
    , pingStatus : OptionalArgument String
    , slug : OptionalArgument String
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tags : OptionalArgument PostTagsInput
    , title : OptionalArgument String
    , toPing : OptionalArgument (List (Maybe String))
    }


{-| Type for the CreatePostInput input object.
-}
type CreatePostInput
    = CreatePostInput CreatePostInputRaw


{-| Encode a CreatePostInput into a value that can be used as an argument.
-}
encodeCreatePostInput : CreatePostInput -> Value
encodeCreatePostInput (CreatePostInput input) =
    Encode.maybeObject
        [ ( "authorId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.authorId ), ( "categories", encodePostCategoriesInput |> Encode.optional input.categories ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "commentCount", Encode.int |> Encode.optional input.commentCount ), ( "commentStatus", Encode.string |> Encode.optional input.commentStatus ), ( "content", Encode.string |> Encode.optional input.content ), ( "date", Encode.string |> Encode.optional input.date ), ( "excerpt", Encode.string |> Encode.optional input.excerpt ), ( "menuOrder", Encode.int |> Encode.optional input.menuOrder ), ( "mimeType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.mimeType ), ( "parentId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.parentId ), ( "password", Encode.string |> Encode.optional input.password ), ( "pinged", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.pinged ), ( "pingStatus", Encode.string |> Encode.optional input.pingStatus ), ( "slug", Encode.string |> Encode.optional input.slug ), ( "status", Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.optional input.status ), ( "tags", encodePostTagsInput |> Encode.optional input.tags ), ( "title", Encode.string |> Encode.optional input.title ), ( "toPing", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.toPing ) ]


buildCreateTagInput : CreateTagInputRequiredFields -> (CreateTagInputOptionalFields -> CreateTagInputOptionalFields) -> CreateTagInput
buildCreateTagInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { aliasOf = Absent, description = Absent, slug = Absent }
    in
    { aliasOf = optionals.aliasOf, clientMutationId = required.clientMutationId, description = optionals.description, name = required.name, slug = optionals.slug }


type alias CreateTagInputRequiredFields =
    { clientMutationId : String
    , name : String
    }


type alias CreateTagInputOptionalFields =
    { aliasOf : OptionalArgument String
    , description : OptionalArgument String
    , slug : OptionalArgument String
    }


{-| Type for the CreateTagInput input object.
-}
type alias CreateTagInput =
    { aliasOf : OptionalArgument String
    , clientMutationId : String
    , description : OptionalArgument String
    , name : String
    , slug : OptionalArgument String
    }


{-| Encode a CreateTagInput into a value that can be used as an argument.
-}
encodeCreateTagInput : CreateTagInput -> Value
encodeCreateTagInput input =
    Encode.maybeObject
        [ ( "aliasOf", Encode.string |> Encode.optional input.aliasOf ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "name", Encode.string input.name |> Just ), ( "slug", Encode.string |> Encode.optional input.slug ) ]


buildCreateUserInput : CreateUserInputRequiredFields -> (CreateUserInputOptionalFields -> CreateUserInputOptionalFields) -> CreateUserInput
buildCreateUserInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { aim = Absent, description = Absent, displayName = Absent, email = Absent, firstName = Absent, jabber = Absent, lastName = Absent, locale = Absent, nicename = Absent, nickname = Absent, password = Absent, registered = Absent, richEditing = Absent, roles = Absent, websiteUrl = Absent, yim = Absent }
    in
    { aim = optionals.aim, clientMutationId = required.clientMutationId, description = optionals.description, displayName = optionals.displayName, email = optionals.email, firstName = optionals.firstName, jabber = optionals.jabber, lastName = optionals.lastName, locale = optionals.locale, nicename = optionals.nicename, nickname = optionals.nickname, password = optionals.password, registered = optionals.registered, richEditing = optionals.richEditing, roles = optionals.roles, username = required.username, websiteUrl = optionals.websiteUrl, yim = optionals.yim }


type alias CreateUserInputRequiredFields =
    { clientMutationId : String
    , username : String
    }


type alias CreateUserInputOptionalFields =
    { aim : OptionalArgument String
    , description : OptionalArgument String
    , displayName : OptionalArgument String
    , email : OptionalArgument String
    , firstName : OptionalArgument String
    , jabber : OptionalArgument String
    , lastName : OptionalArgument String
    , locale : OptionalArgument String
    , nicename : OptionalArgument String
    , nickname : OptionalArgument String
    , password : OptionalArgument String
    , registered : OptionalArgument String
    , richEditing : OptionalArgument String
    , roles : OptionalArgument (List (Maybe String))
    , websiteUrl : OptionalArgument String
    , yim : OptionalArgument String
    }


{-| Type for the CreateUserInput input object.
-}
type alias CreateUserInput =
    { aim : OptionalArgument String
    , clientMutationId : String
    , description : OptionalArgument String
    , displayName : OptionalArgument String
    , email : OptionalArgument String
    , firstName : OptionalArgument String
    , jabber : OptionalArgument String
    , lastName : OptionalArgument String
    , locale : OptionalArgument String
    , nicename : OptionalArgument String
    , nickname : OptionalArgument String
    , password : OptionalArgument String
    , registered : OptionalArgument String
    , richEditing : OptionalArgument String
    , roles : OptionalArgument (List (Maybe String))
    , username : String
    , websiteUrl : OptionalArgument String
    , yim : OptionalArgument String
    }


{-| Encode a CreateUserInput into a value that can be used as an argument.
-}
encodeCreateUserInput : CreateUserInput -> Value
encodeCreateUserInput input =
    Encode.maybeObject
        [ ( "aim", Encode.string |> Encode.optional input.aim ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "displayName", Encode.string |> Encode.optional input.displayName ), ( "email", Encode.string |> Encode.optional input.email ), ( "firstName", Encode.string |> Encode.optional input.firstName ), ( "jabber", Encode.string |> Encode.optional input.jabber ), ( "lastName", Encode.string |> Encode.optional input.lastName ), ( "locale", Encode.string |> Encode.optional input.locale ), ( "nicename", Encode.string |> Encode.optional input.nicename ), ( "nickname", Encode.string |> Encode.optional input.nickname ), ( "password", Encode.string |> Encode.optional input.password ), ( "registered", Encode.string |> Encode.optional input.registered ), ( "richEditing", Encode.string |> Encode.optional input.richEditing ), ( "roles", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.roles ), ( "username", Encode.string input.username |> Just ), ( "websiteUrl", Encode.string |> Encode.optional input.websiteUrl ), ( "yim", Encode.string |> Encode.optional input.yim ) ]


buildDateInput : (DateInputOptionalFields -> DateInputOptionalFields) -> DateInput
buildDateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { day = Absent, month = Absent, year = Absent }
    in
    { day = optionals.day, month = optionals.month, year = optionals.year }


type alias DateInputOptionalFields =
    { day : OptionalArgument Int
    , month : OptionalArgument Int
    , year : OptionalArgument Int
    }


{-| Type for the DateInput input object.
-}
type alias DateInput =
    { day : OptionalArgument Int
    , month : OptionalArgument Int
    , year : OptionalArgument Int
    }


{-| Encode a DateInput into a value that can be used as an argument.
-}
encodeDateInput : DateInput -> Value
encodeDateInput input =
    Encode.maybeObject
        [ ( "day", Encode.int |> Encode.optional input.day ), ( "month", Encode.int |> Encode.optional input.month ), ( "year", Encode.int |> Encode.optional input.year ) ]


buildDateQueryInput : (DateQueryInputOptionalFields -> DateQueryInputOptionalFields) -> DateQueryInput
buildDateQueryInput fillOptionals =
    let
        optionals =
            fillOptionals
                { after = Absent, before = Absent, column = Absent, compare = Absent, day = Absent, hour = Absent, inclusive = Absent, minute = Absent, month = Absent, relation = Absent, second = Absent, week = Absent, year = Absent }
    in
    { after = optionals.after, before = optionals.before, column = optionals.column, compare = optionals.compare, day = optionals.day, hour = optionals.hour, inclusive = optionals.inclusive, minute = optionals.minute, month = optionals.month, relation = optionals.relation, second = optionals.second, week = optionals.week, year = optionals.year }


type alias DateQueryInputOptionalFields =
    { after : OptionalArgument DateInput
    , before : OptionalArgument DateInput
    , column : OptionalArgument Wordpress.Enum.PostObjectsConnectionDateColumnEnum.PostObjectsConnectionDateColumnEnum
    , compare : OptionalArgument String
    , day : OptionalArgument Int
    , hour : OptionalArgument Int
    , inclusive : OptionalArgument Bool
    , minute : OptionalArgument Int
    , month : OptionalArgument Int
    , relation : OptionalArgument Wordpress.Enum.RelationEnum.RelationEnum
    , second : OptionalArgument Int
    , week : OptionalArgument Int
    , year : OptionalArgument Int
    }


{-| Type for the DateQueryInput input object.
-}
type alias DateQueryInput =
    { after : OptionalArgument DateInput
    , before : OptionalArgument DateInput
    , column : OptionalArgument Wordpress.Enum.PostObjectsConnectionDateColumnEnum.PostObjectsConnectionDateColumnEnum
    , compare : OptionalArgument String
    , day : OptionalArgument Int
    , hour : OptionalArgument Int
    , inclusive : OptionalArgument Bool
    , minute : OptionalArgument Int
    , month : OptionalArgument Int
    , relation : OptionalArgument Wordpress.Enum.RelationEnum.RelationEnum
    , second : OptionalArgument Int
    , week : OptionalArgument Int
    , year : OptionalArgument Int
    }


{-| Encode a DateQueryInput into a value that can be used as an argument.
-}
encodeDateQueryInput : DateQueryInput -> Value
encodeDateQueryInput input =
    Encode.maybeObject
        [ ( "after", encodeDateInput |> Encode.optional input.after ), ( "before", encodeDateInput |> Encode.optional input.before ), ( "column", Encode.enum Wordpress.Enum.PostObjectsConnectionDateColumnEnum.toString |> Encode.optional input.column ), ( "compare", Encode.string |> Encode.optional input.compare ), ( "day", Encode.int |> Encode.optional input.day ), ( "hour", Encode.int |> Encode.optional input.hour ), ( "inclusive", Encode.bool |> Encode.optional input.inclusive ), ( "minute", Encode.int |> Encode.optional input.minute ), ( "month", Encode.int |> Encode.optional input.month ), ( "relation", Encode.enum Wordpress.Enum.RelationEnum.toString |> Encode.optional input.relation ), ( "second", Encode.int |> Encode.optional input.second ), ( "week", Encode.int |> Encode.optional input.week ), ( "year", Encode.int |> Encode.optional input.year ) ]


buildDeleteCategoryInput : DeleteCategoryInputRequiredFields -> DeleteCategoryInput
buildDeleteCategoryInput required =
    { clientMutationId = required.clientMutationId, id = required.id }


type alias DeleteCategoryInputRequiredFields =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


{-| Type for the DeleteCategoryInput input object.
-}
type alias DeleteCategoryInput =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


{-| Encode a DeleteCategoryInput into a value that can be used as an argument.
-}
encodeDeleteCategoryInput : DeleteCategoryInput -> Value
encodeDeleteCategoryInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) input.id |> Just ) ]


buildDeleteCommentInput : DeleteCommentInputRequiredFields -> (DeleteCommentInputOptionalFields -> DeleteCommentInputOptionalFields) -> DeleteCommentInput
buildDeleteCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { forceDelete = Absent }
    in
    { clientMutationId = required.clientMutationId, forceDelete = optionals.forceDelete, id = required.id }


type alias DeleteCommentInputRequiredFields =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


type alias DeleteCommentInputOptionalFields =
    { forceDelete : OptionalArgument Bool }


{-| Type for the DeleteCommentInput input object.
-}
type alias DeleteCommentInput =
    { clientMutationId : String
    , forceDelete : OptionalArgument Bool
    , id : Wordpress.ScalarCodecs.Id
    }


{-| Encode a DeleteCommentInput into a value that can be used as an argument.
-}
encodeDeleteCommentInput : DeleteCommentInput -> Value
encodeDeleteCommentInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "forceDelete", Encode.bool |> Encode.optional input.forceDelete ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) input.id |> Just ) ]


buildDeleteMediaItemInput : DeleteMediaItemInputRequiredFields -> (DeleteMediaItemInputOptionalFields -> DeleteMediaItemInputOptionalFields) -> DeleteMediaItemInput
buildDeleteMediaItemInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { forceDelete = Absent }
    in
    { clientMutationId = required.clientMutationId, forceDelete = optionals.forceDelete, id = required.id }


type alias DeleteMediaItemInputRequiredFields =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


type alias DeleteMediaItemInputOptionalFields =
    { forceDelete : OptionalArgument Bool }


{-| Type for the DeleteMediaItemInput input object.
-}
type alias DeleteMediaItemInput =
    { clientMutationId : String
    , forceDelete : OptionalArgument Bool
    , id : Wordpress.ScalarCodecs.Id
    }


{-| Encode a DeleteMediaItemInput into a value that can be used as an argument.
-}
encodeDeleteMediaItemInput : DeleteMediaItemInput -> Value
encodeDeleteMediaItemInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "forceDelete", Encode.bool |> Encode.optional input.forceDelete ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) input.id |> Just ) ]


buildDeletePageInput : DeletePageInputRequiredFields -> (DeletePageInputOptionalFields -> DeletePageInputOptionalFields) -> DeletePageInput
buildDeletePageInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { forceDelete = Absent }
    in
    { clientMutationId = required.clientMutationId, forceDelete = optionals.forceDelete, id = required.id }


type alias DeletePageInputRequiredFields =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


type alias DeletePageInputOptionalFields =
    { forceDelete : OptionalArgument Bool }


{-| Type for the DeletePageInput input object.
-}
type alias DeletePageInput =
    { clientMutationId : String
    , forceDelete : OptionalArgument Bool
    , id : Wordpress.ScalarCodecs.Id
    }


{-| Encode a DeletePageInput into a value that can be used as an argument.
-}
encodeDeletePageInput : DeletePageInput -> Value
encodeDeletePageInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "forceDelete", Encode.bool |> Encode.optional input.forceDelete ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) input.id |> Just ) ]


buildDeletePostInput : DeletePostInputRequiredFields -> (DeletePostInputOptionalFields -> DeletePostInputOptionalFields) -> DeletePostInput
buildDeletePostInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { forceDelete = Absent }
    in
    { clientMutationId = required.clientMutationId, forceDelete = optionals.forceDelete, id = required.id }


type alias DeletePostInputRequiredFields =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


type alias DeletePostInputOptionalFields =
    { forceDelete : OptionalArgument Bool }


{-| Type for the DeletePostInput input object.
-}
type alias DeletePostInput =
    { clientMutationId : String
    , forceDelete : OptionalArgument Bool
    , id : Wordpress.ScalarCodecs.Id
    }


{-| Encode a DeletePostInput into a value that can be used as an argument.
-}
encodeDeletePostInput : DeletePostInput -> Value
encodeDeletePostInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "forceDelete", Encode.bool |> Encode.optional input.forceDelete ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) input.id |> Just ) ]


buildDeleteRevisionInput : DeleteRevisionInputRequiredFields -> (DeleteRevisionInputOptionalFields -> DeleteRevisionInputOptionalFields) -> DeleteRevisionInput
buildDeleteRevisionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { forceDelete = Absent }
    in
    { clientMutationId = required.clientMutationId, forceDelete = optionals.forceDelete, id = required.id }


type alias DeleteRevisionInputRequiredFields =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


type alias DeleteRevisionInputOptionalFields =
    { forceDelete : OptionalArgument Bool }


{-| Type for the DeleteRevisionInput input object.
-}
type alias DeleteRevisionInput =
    { clientMutationId : String
    , forceDelete : OptionalArgument Bool
    , id : Wordpress.ScalarCodecs.Id
    }


{-| Encode a DeleteRevisionInput into a value that can be used as an argument.
-}
encodeDeleteRevisionInput : DeleteRevisionInput -> Value
encodeDeleteRevisionInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "forceDelete", Encode.bool |> Encode.optional input.forceDelete ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) input.id |> Just ) ]


buildDeleteTagInput : DeleteTagInputRequiredFields -> DeleteTagInput
buildDeleteTagInput required =
    { clientMutationId = required.clientMutationId, id = required.id }


type alias DeleteTagInputRequiredFields =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


{-| Type for the DeleteTagInput input object.
-}
type alias DeleteTagInput =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


{-| Encode a DeleteTagInput into a value that can be used as an argument.
-}
encodeDeleteTagInput : DeleteTagInput -> Value
encodeDeleteTagInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) input.id |> Just ) ]


buildDeleteUserInput : DeleteUserInputRequiredFields -> (DeleteUserInputOptionalFields -> DeleteUserInputOptionalFields) -> DeleteUserInput
buildDeleteUserInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { reassignId = Absent }
    in
    { clientMutationId = required.clientMutationId, id = required.id, reassignId = optionals.reassignId }


type alias DeleteUserInputRequiredFields =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


type alias DeleteUserInputOptionalFields =
    { reassignId : OptionalArgument Wordpress.ScalarCodecs.Id }


{-| Type for the DeleteUserInput input object.
-}
type alias DeleteUserInput =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    , reassignId : OptionalArgument Wordpress.ScalarCodecs.Id
    }


{-| Encode a DeleteUserInput into a value that can be used as an argument.
-}
encodeDeleteUserInput : DeleteUserInput -> Value
encodeDeleteUserInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "reassignId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.reassignId ) ]


buildLoginInput : LoginInputRequiredFields -> LoginInput
buildLoginInput required =
    { username = required.username, password = required.password, clientMutationId = required.clientMutationId }


type alias LoginInputRequiredFields =
    { username : String
    , password : String
    , clientMutationId : String
    }


{-| Type for the LoginInput input object.
-}
type alias LoginInput =
    { username : String
    , password : String
    , clientMutationId : String
    }


{-| Encode a LoginInput into a value that can be used as an argument.
-}
encodeLoginInput : LoginInput -> Value
encodeLoginInput input =
    Encode.maybeObject
        [ ( "username", Encode.string input.username |> Just ), ( "password", Encode.string input.password |> Just ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ) ]


buildMediaItemToCommentConnectionWhereArgs : (MediaItemToCommentConnectionWhereArgsOptionalFields -> MediaItemToCommentConnectionWhereArgsOptionalFields) -> MediaItemToCommentConnectionWhereArgs
buildMediaItemToCommentConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { authorEmail = Absent, authorIn = Absent, authorNotIn = Absent, authorUrl = Absent, commentIn = Absent, commentNotIn = Absent, commentType = Absent, commentTypeIn = Absent, commentTypeNotIn = Absent, contentAuthor = Absent, contentAuthorIn = Absent, contentAuthorNotIn = Absent, contentId = Absent, contentIdIn = Absent, contentIdNotIn = Absent, contentName = Absent, contentParent = Absent, contentStatus = Absent, contentType = Absent, includeUnapproved = Absent, karma = Absent, order = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, search = Absent, status = Absent, userId = Absent }
    in
    { authorEmail = optionals.authorEmail, authorIn = optionals.authorIn, authorNotIn = optionals.authorNotIn, authorUrl = optionals.authorUrl, commentIn = optionals.commentIn, commentNotIn = optionals.commentNotIn, commentType = optionals.commentType, commentTypeIn = optionals.commentTypeIn, commentTypeNotIn = optionals.commentTypeNotIn, contentAuthor = optionals.contentAuthor, contentAuthorIn = optionals.contentAuthorIn, contentAuthorNotIn = optionals.contentAuthorNotIn, contentId = optionals.contentId, contentIdIn = optionals.contentIdIn, contentIdNotIn = optionals.contentIdNotIn, contentName = optionals.contentName, contentParent = optionals.contentParent, contentStatus = optionals.contentStatus, contentType = optionals.contentType, includeUnapproved = optionals.includeUnapproved, karma = optionals.karma, order = optionals.order, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, search = optionals.search, status = optionals.status, userId = optionals.userId }


type alias MediaItemToCommentConnectionWhereArgsOptionalFields =
    { authorEmail : OptionalArgument String
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorUrl : OptionalArgument String
    , commentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentType : OptionalArgument String
    , commentTypeIn : OptionalArgument (List (Maybe String))
    , commentTypeNotIn : OptionalArgument String
    , contentAuthor : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , contentIdIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentIdNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentName : OptionalArgument String
    , contentParent : OptionalArgument Int
    , contentStatus : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , contentType : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , includeUnapproved : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , karma : OptionalArgument Int
    , order : OptionalArgument Wordpress.Enum.OrderEnum.OrderEnum
    , orderby : OptionalArgument Wordpress.Enum.CommentsConnectionOrderbyEnum.CommentsConnectionOrderbyEnum
    , parent : OptionalArgument Int
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , search : OptionalArgument String
    , status : OptionalArgument String
    , userId : OptionalArgument Wordpress.ScalarCodecs.Id
    }


{-| Type for the MediaItemToCommentConnectionWhereArgs input object.
-}
type alias MediaItemToCommentConnectionWhereArgs =
    { authorEmail : OptionalArgument String
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorUrl : OptionalArgument String
    , commentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentType : OptionalArgument String
    , commentTypeIn : OptionalArgument (List (Maybe String))
    , commentTypeNotIn : OptionalArgument String
    , contentAuthor : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , contentIdIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentIdNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentName : OptionalArgument String
    , contentParent : OptionalArgument Int
    , contentStatus : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , contentType : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , includeUnapproved : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , karma : OptionalArgument Int
    , order : OptionalArgument Wordpress.Enum.OrderEnum.OrderEnum
    , orderby : OptionalArgument Wordpress.Enum.CommentsConnectionOrderbyEnum.CommentsConnectionOrderbyEnum
    , parent : OptionalArgument Int
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , search : OptionalArgument String
    , status : OptionalArgument String
    , userId : OptionalArgument Wordpress.ScalarCodecs.Id
    }


{-| Encode a MediaItemToCommentConnectionWhereArgs into a value that can be used as an argument.
-}
encodeMediaItemToCommentConnectionWhereArgs : MediaItemToCommentConnectionWhereArgs -> Value
encodeMediaItemToCommentConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "authorEmail", Encode.string |> Encode.optional input.authorEmail ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "authorUrl", Encode.string |> Encode.optional input.authorUrl ), ( "commentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.commentIn ), ( "commentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.commentNotIn ), ( "commentType", Encode.string |> Encode.optional input.commentType ), ( "commentTypeIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.commentTypeIn ), ( "commentTypeNotIn", Encode.string |> Encode.optional input.commentTypeNotIn ), ( "contentAuthor", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthor ), ( "contentAuthorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthorIn ), ( "contentAuthorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthorNotIn ), ( "contentId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.contentId ), ( "contentIdIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentIdIn ), ( "contentIdNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentIdNotIn ), ( "contentName", Encode.string |> Encode.optional input.contentName ), ( "contentParent", Encode.int |> Encode.optional input.contentParent ), ( "contentStatus", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.contentStatus ), ( "contentType", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.contentType ), ( "includeUnapproved", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.includeUnapproved ), ( "karma", Encode.int |> Encode.optional input.karma ), ( "order", Encode.enum Wordpress.Enum.OrderEnum.toString |> Encode.optional input.order ), ( "orderby", Encode.enum Wordpress.Enum.CommentsConnectionOrderbyEnum.toString |> Encode.optional input.orderby ), ( "parent", Encode.int |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "search", Encode.string |> Encode.optional input.search ), ( "status", Encode.string |> Encode.optional input.status ), ( "userId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.userId ) ]


buildMenuItemToMenuItemConnectionWhereArgs : (MenuItemToMenuItemConnectionWhereArgsOptionalFields -> MenuItemToMenuItemConnectionWhereArgsOptionalFields) -> MenuItemToMenuItemConnectionWhereArgs
buildMenuItemToMenuItemConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, location = Absent }
    in
    { id = optionals.id, location = optionals.location }


type alias MenuItemToMenuItemConnectionWhereArgsOptionalFields =
    { id : OptionalArgument Int
    , location : OptionalArgument Wordpress.Enum.MenuLocationEnum.MenuLocationEnum
    }


{-| Type for the MenuItemToMenuItemConnectionWhereArgs input object.
-}
type alias MenuItemToMenuItemConnectionWhereArgs =
    { id : OptionalArgument Int
    , location : OptionalArgument Wordpress.Enum.MenuLocationEnum.MenuLocationEnum
    }


{-| Encode a MenuItemToMenuItemConnectionWhereArgs into a value that can be used as an argument.
-}
encodeMenuItemToMenuItemConnectionWhereArgs : MenuItemToMenuItemConnectionWhereArgs -> Value
encodeMenuItemToMenuItemConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input.id ), ( "location", Encode.enum Wordpress.Enum.MenuLocationEnum.toString |> Encode.optional input.location ) ]


buildMenuToMenuItemConnectionWhereArgs : (MenuToMenuItemConnectionWhereArgsOptionalFields -> MenuToMenuItemConnectionWhereArgsOptionalFields) -> MenuToMenuItemConnectionWhereArgs
buildMenuToMenuItemConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, location = Absent }
    in
    { id = optionals.id, location = optionals.location }


type alias MenuToMenuItemConnectionWhereArgsOptionalFields =
    { id : OptionalArgument Int
    , location : OptionalArgument Wordpress.Enum.MenuLocationEnum.MenuLocationEnum
    }


{-| Type for the MenuToMenuItemConnectionWhereArgs input object.
-}
type alias MenuToMenuItemConnectionWhereArgs =
    { id : OptionalArgument Int
    , location : OptionalArgument Wordpress.Enum.MenuLocationEnum.MenuLocationEnum
    }


{-| Encode a MenuToMenuItemConnectionWhereArgs into a value that can be used as an argument.
-}
encodeMenuToMenuItemConnectionWhereArgs : MenuToMenuItemConnectionWhereArgs -> Value
encodeMenuToMenuItemConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input.id ), ( "location", Encode.enum Wordpress.Enum.MenuLocationEnum.toString |> Encode.optional input.location ) ]


buildPageToCommentConnectionWhereArgs : (PageToCommentConnectionWhereArgsOptionalFields -> PageToCommentConnectionWhereArgsOptionalFields) -> PageToCommentConnectionWhereArgs
buildPageToCommentConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { authorEmail = Absent, authorIn = Absent, authorNotIn = Absent, authorUrl = Absent, commentIn = Absent, commentNotIn = Absent, commentType = Absent, commentTypeIn = Absent, commentTypeNotIn = Absent, contentAuthor = Absent, contentAuthorIn = Absent, contentAuthorNotIn = Absent, contentId = Absent, contentIdIn = Absent, contentIdNotIn = Absent, contentName = Absent, contentParent = Absent, contentStatus = Absent, contentType = Absent, includeUnapproved = Absent, karma = Absent, order = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, search = Absent, status = Absent, userId = Absent }
    in
    { authorEmail = optionals.authorEmail, authorIn = optionals.authorIn, authorNotIn = optionals.authorNotIn, authorUrl = optionals.authorUrl, commentIn = optionals.commentIn, commentNotIn = optionals.commentNotIn, commentType = optionals.commentType, commentTypeIn = optionals.commentTypeIn, commentTypeNotIn = optionals.commentTypeNotIn, contentAuthor = optionals.contentAuthor, contentAuthorIn = optionals.contentAuthorIn, contentAuthorNotIn = optionals.contentAuthorNotIn, contentId = optionals.contentId, contentIdIn = optionals.contentIdIn, contentIdNotIn = optionals.contentIdNotIn, contentName = optionals.contentName, contentParent = optionals.contentParent, contentStatus = optionals.contentStatus, contentType = optionals.contentType, includeUnapproved = optionals.includeUnapproved, karma = optionals.karma, order = optionals.order, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, search = optionals.search, status = optionals.status, userId = optionals.userId }


type alias PageToCommentConnectionWhereArgsOptionalFields =
    { authorEmail : OptionalArgument String
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorUrl : OptionalArgument String
    , commentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentType : OptionalArgument String
    , commentTypeIn : OptionalArgument (List (Maybe String))
    , commentTypeNotIn : OptionalArgument String
    , contentAuthor : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , contentIdIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentIdNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentName : OptionalArgument String
    , contentParent : OptionalArgument Int
    , contentStatus : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , contentType : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , includeUnapproved : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , karma : OptionalArgument Int
    , order : OptionalArgument Wordpress.Enum.OrderEnum.OrderEnum
    , orderby : OptionalArgument Wordpress.Enum.CommentsConnectionOrderbyEnum.CommentsConnectionOrderbyEnum
    , parent : OptionalArgument Int
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , search : OptionalArgument String
    , status : OptionalArgument String
    , userId : OptionalArgument Wordpress.ScalarCodecs.Id
    }


{-| Type for the PageToCommentConnectionWhereArgs input object.
-}
type alias PageToCommentConnectionWhereArgs =
    { authorEmail : OptionalArgument String
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorUrl : OptionalArgument String
    , commentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentType : OptionalArgument String
    , commentTypeIn : OptionalArgument (List (Maybe String))
    , commentTypeNotIn : OptionalArgument String
    , contentAuthor : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , contentIdIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentIdNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentName : OptionalArgument String
    , contentParent : OptionalArgument Int
    , contentStatus : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , contentType : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , includeUnapproved : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , karma : OptionalArgument Int
    , order : OptionalArgument Wordpress.Enum.OrderEnum.OrderEnum
    , orderby : OptionalArgument Wordpress.Enum.CommentsConnectionOrderbyEnum.CommentsConnectionOrderbyEnum
    , parent : OptionalArgument Int
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , search : OptionalArgument String
    , status : OptionalArgument String
    , userId : OptionalArgument Wordpress.ScalarCodecs.Id
    }


{-| Encode a PageToCommentConnectionWhereArgs into a value that can be used as an argument.
-}
encodePageToCommentConnectionWhereArgs : PageToCommentConnectionWhereArgs -> Value
encodePageToCommentConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "authorEmail", Encode.string |> Encode.optional input.authorEmail ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "authorUrl", Encode.string |> Encode.optional input.authorUrl ), ( "commentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.commentIn ), ( "commentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.commentNotIn ), ( "commentType", Encode.string |> Encode.optional input.commentType ), ( "commentTypeIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.commentTypeIn ), ( "commentTypeNotIn", Encode.string |> Encode.optional input.commentTypeNotIn ), ( "contentAuthor", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthor ), ( "contentAuthorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthorIn ), ( "contentAuthorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthorNotIn ), ( "contentId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.contentId ), ( "contentIdIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentIdIn ), ( "contentIdNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentIdNotIn ), ( "contentName", Encode.string |> Encode.optional input.contentName ), ( "contentParent", Encode.int |> Encode.optional input.contentParent ), ( "contentStatus", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.contentStatus ), ( "contentType", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.contentType ), ( "includeUnapproved", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.includeUnapproved ), ( "karma", Encode.int |> Encode.optional input.karma ), ( "order", Encode.enum Wordpress.Enum.OrderEnum.toString |> Encode.optional input.order ), ( "orderby", Encode.enum Wordpress.Enum.CommentsConnectionOrderbyEnum.toString |> Encode.optional input.orderby ), ( "parent", Encode.int |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "search", Encode.string |> Encode.optional input.search ), ( "status", Encode.string |> Encode.optional input.status ), ( "userId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.userId ) ]


buildPageToPageConnectionWhereArgs : (PageToPageConnectionWhereArgsOptionalFields -> PageToPageConnectionWhereArgsOptionalFields) -> PageToPageConnectionWhereArgs
buildPageToPageConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { author = Absent, authorIn = Absent, authorName = Absent, authorNotIn = Absent, categoryId = Absent, categoryIn = Absent, categoryName = Absent, categoryNotIn = Absent, dateQuery = Absent, hasPassword = Absent, id = Absent, in_ = Absent, mimeType = Absent, name = Absent, nameIn = Absent, notIn = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, password = Absent, search = Absent, stati = Absent, status = Absent, tag = Absent, tagId = Absent, tagIn = Absent, tagNotIn = Absent, tagSlugAnd = Absent, tagSlugIn = Absent, title = Absent }
    in
    { author = optionals.author, authorIn = optionals.authorIn, authorName = optionals.authorName, authorNotIn = optionals.authorNotIn, categoryId = optionals.categoryId, categoryIn = optionals.categoryIn, categoryName = optionals.categoryName, categoryNotIn = optionals.categoryNotIn, dateQuery = optionals.dateQuery, hasPassword = optionals.hasPassword, id = optionals.id, in_ = optionals.in_, mimeType = optionals.mimeType, name = optionals.name, nameIn = optionals.nameIn, notIn = optionals.notIn, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, password = optionals.password, search = optionals.search, stati = optionals.stati, status = optionals.status, tag = optionals.tag, tagId = optionals.tagId, tagIn = optionals.tagIn, tagNotIn = optionals.tagNotIn, tagSlugAnd = optionals.tagSlugAnd, tagSlugIn = optionals.tagSlugIn, title = optionals.title }


type alias PageToPageConnectionWhereArgsOptionalFields =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Type for the PageToPageConnectionWhereArgs input object.
-}
type alias PageToPageConnectionWhereArgs =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Encode a PageToPageConnectionWhereArgs into a value that can be used as an argument.
-}
encodePageToPageConnectionWhereArgs : PageToPageConnectionWhereArgs -> Value
encodePageToPageConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "author", Encode.int |> Encode.optional input.author ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorName", Encode.string |> Encode.optional input.authorName ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "categoryId", Encode.int |> Encode.optional input.categoryId ), ( "categoryIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryIn ), ( "categoryName", Encode.string |> Encode.optional input.categoryName ), ( "categoryNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryNotIn ), ( "dateQuery", encodeDateQueryInput |> Encode.optional input.dateQuery ), ( "hasPassword", Encode.bool |> Encode.optional input.hasPassword ), ( "id", Encode.int |> Encode.optional input.id ), ( "in", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.in_ ), ( "mimeType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.mimeType ), ( "name", Encode.string |> Encode.optional input.name ), ( "nameIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.nameIn ), ( "notIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.notIn ), ( "orderby", (encodePostObjectsConnectionOrderbyInput |> Encode.maybe |> Encode.list) |> Encode.optional input.orderby ), ( "parent", Encode.string |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "password", Encode.string |> Encode.optional input.password ), ( "search", Encode.string |> Encode.optional input.search ), ( "stati", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.stati ), ( "status", Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.optional input.status ), ( "tag", Encode.string |> Encode.optional input.tag ), ( "tagId", Encode.string |> Encode.optional input.tagId ), ( "tagIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagIn ), ( "tagNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagNotIn ), ( "tagSlugAnd", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugAnd ), ( "tagSlugIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugIn ), ( "title", Encode.string |> Encode.optional input.title ) ]


buildPostCategoriesInput : (PostCategoriesInputOptionalFields -> PostCategoriesInputOptionalFields) -> PostCategoriesInput
buildPostCategoriesInput fillOptionals =
    let
        optionals =
            fillOptionals
                { append = Absent, nodes = Absent }
    in
    { append = optionals.append, nodes = optionals.nodes }


type alias PostCategoriesInputOptionalFields =
    { append : OptionalArgument Bool
    , nodes : OptionalArgument (List (Maybe PostCategoriesNodeInput))
    }


{-| Type for the PostCategoriesInput input object.
-}
type alias PostCategoriesInput =
    { append : OptionalArgument Bool
    , nodes : OptionalArgument (List (Maybe PostCategoriesNodeInput))
    }


{-| Encode a PostCategoriesInput into a value that can be used as an argument.
-}
encodePostCategoriesInput : PostCategoriesInput -> Value
encodePostCategoriesInput input =
    Encode.maybeObject
        [ ( "append", Encode.bool |> Encode.optional input.append ), ( "nodes", (encodePostCategoriesNodeInput |> Encode.maybe |> Encode.list) |> Encode.optional input.nodes ) ]


buildPostCategoriesNodeInput : (PostCategoriesNodeInputOptionalFields -> PostCategoriesNodeInputOptionalFields) -> PostCategoriesNodeInput
buildPostCategoriesNodeInput fillOptionals =
    let
        optionals =
            fillOptionals
                { description = Absent, id = Absent, name = Absent, slug = Absent }
    in
    { description = optionals.description, id = optionals.id, name = optionals.name, slug = optionals.slug }


type alias PostCategoriesNodeInputOptionalFields =
    { description : OptionalArgument String
    , id : OptionalArgument Wordpress.ScalarCodecs.Id
    , name : OptionalArgument String
    , slug : OptionalArgument String
    }


{-| Type for the PostCategoriesNodeInput input object.
-}
type alias PostCategoriesNodeInput =
    { description : OptionalArgument String
    , id : OptionalArgument Wordpress.ScalarCodecs.Id
    , name : OptionalArgument String
    , slug : OptionalArgument String
    }


{-| Encode a PostCategoriesNodeInput into a value that can be used as an argument.
-}
encodePostCategoriesNodeInput : PostCategoriesNodeInput -> Value
encodePostCategoriesNodeInput input =
    Encode.maybeObject
        [ ( "description", Encode.string |> Encode.optional input.description ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id ), ( "name", Encode.string |> Encode.optional input.name ), ( "slug", Encode.string |> Encode.optional input.slug ) ]


buildPostObjectsConnectionOrderbyInput : PostObjectsConnectionOrderbyInputRequiredFields -> (PostObjectsConnectionOrderbyInputOptionalFields -> PostObjectsConnectionOrderbyInputOptionalFields) -> PostObjectsConnectionOrderbyInput
buildPostObjectsConnectionOrderbyInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { order = Absent }
    in
    { field = required.field, order = optionals.order }


type alias PostObjectsConnectionOrderbyInputRequiredFields =
    { field : Wordpress.Enum.PostObjectsConnectionOrderbyEnum.PostObjectsConnectionOrderbyEnum }


type alias PostObjectsConnectionOrderbyInputOptionalFields =
    { order : OptionalArgument Wordpress.Enum.OrderEnum.OrderEnum }


{-| Type for the PostObjectsConnectionOrderbyInput input object.
-}
type alias PostObjectsConnectionOrderbyInput =
    { field : Wordpress.Enum.PostObjectsConnectionOrderbyEnum.PostObjectsConnectionOrderbyEnum
    , order : OptionalArgument Wordpress.Enum.OrderEnum.OrderEnum
    }


{-| Encode a PostObjectsConnectionOrderbyInput into a value that can be used as an argument.
-}
encodePostObjectsConnectionOrderbyInput : PostObjectsConnectionOrderbyInput -> Value
encodePostObjectsConnectionOrderbyInput input =
    Encode.maybeObject
        [ ( "field", Encode.enum Wordpress.Enum.PostObjectsConnectionOrderbyEnum.toString input.field |> Just ), ( "order", Encode.enum Wordpress.Enum.OrderEnum.toString |> Encode.optional input.order ) ]


buildPostTagsInput : (PostTagsInputOptionalFields -> PostTagsInputOptionalFields) -> PostTagsInput
buildPostTagsInput fillOptionals =
    let
        optionals =
            fillOptionals
                { append = Absent, nodes = Absent }
    in
    { append = optionals.append, nodes = optionals.nodes }


type alias PostTagsInputOptionalFields =
    { append : OptionalArgument Bool
    , nodes : OptionalArgument (List (Maybe PostTagsNodeInput))
    }


{-| Type for the PostTagsInput input object.
-}
type alias PostTagsInput =
    { append : OptionalArgument Bool
    , nodes : OptionalArgument (List (Maybe PostTagsNodeInput))
    }


{-| Encode a PostTagsInput into a value that can be used as an argument.
-}
encodePostTagsInput : PostTagsInput -> Value
encodePostTagsInput input =
    Encode.maybeObject
        [ ( "append", Encode.bool |> Encode.optional input.append ), ( "nodes", (encodePostTagsNodeInput |> Encode.maybe |> Encode.list) |> Encode.optional input.nodes ) ]


buildPostTagsNodeInput : (PostTagsNodeInputOptionalFields -> PostTagsNodeInputOptionalFields) -> PostTagsNodeInput
buildPostTagsNodeInput fillOptionals =
    let
        optionals =
            fillOptionals
                { description = Absent, id = Absent, name = Absent, slug = Absent }
    in
    { description = optionals.description, id = optionals.id, name = optionals.name, slug = optionals.slug }


type alias PostTagsNodeInputOptionalFields =
    { description : OptionalArgument String
    , id : OptionalArgument Wordpress.ScalarCodecs.Id
    , name : OptionalArgument String
    , slug : OptionalArgument String
    }


{-| Type for the PostTagsNodeInput input object.
-}
type alias PostTagsNodeInput =
    { description : OptionalArgument String
    , id : OptionalArgument Wordpress.ScalarCodecs.Id
    , name : OptionalArgument String
    , slug : OptionalArgument String
    }


{-| Encode a PostTagsNodeInput into a value that can be used as an argument.
-}
encodePostTagsNodeInput : PostTagsNodeInput -> Value
encodePostTagsNodeInput input =
    Encode.maybeObject
        [ ( "description", Encode.string |> Encode.optional input.description ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id ), ( "name", Encode.string |> Encode.optional input.name ), ( "slug", Encode.string |> Encode.optional input.slug ) ]


buildPostToCategoryConnectionWhereArgs : (PostToCategoryConnectionWhereArgsOptionalFields -> PostToCategoryConnectionWhereArgsOptionalFields) -> PostToCategoryConnectionWhereArgs
buildPostToCategoryConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { cacheDomain = Absent, childless = Absent, childOf = Absent, descriptionLike = Absent, exclude = Absent, excludeTree = Absent, hideEmpty = Absent, hierarchical = Absent, include = Absent, name = Absent, nameLike = Absent, objectIds = Absent, orderby = Absent, padCounts = Absent, parent = Absent, search = Absent, shouldOnlyIncludeConnectedItems = Absent, shouldOutputInFlatList = Absent, slug = Absent, termTaxonomId = Absent, updateTermMetaCache = Absent }
    in
    { cacheDomain = optionals.cacheDomain, childless = optionals.childless, childOf = optionals.childOf, descriptionLike = optionals.descriptionLike, exclude = optionals.exclude, excludeTree = optionals.excludeTree, hideEmpty = optionals.hideEmpty, hierarchical = optionals.hierarchical, include = optionals.include, name = optionals.name, nameLike = optionals.nameLike, objectIds = optionals.objectIds, orderby = optionals.orderby, padCounts = optionals.padCounts, parent = optionals.parent, search = optionals.search, shouldOnlyIncludeConnectedItems = optionals.shouldOnlyIncludeConnectedItems, shouldOutputInFlatList = optionals.shouldOutputInFlatList, slug = optionals.slug, termTaxonomId = optionals.termTaxonomId, updateTermMetaCache = optionals.updateTermMetaCache }


type alias PostToCategoryConnectionWhereArgsOptionalFields =
    { cacheDomain : OptionalArgument String
    , childless : OptionalArgument Bool
    , childOf : OptionalArgument Int
    , descriptionLike : OptionalArgument String
    , exclude : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , excludeTree : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , hideEmpty : OptionalArgument Bool
    , hierarchical : OptionalArgument Bool
    , include : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , name : OptionalArgument (List (Maybe String))
    , nameLike : OptionalArgument String
    , objectIds : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument Wordpress.Enum.TermObjectsConnectionOrderbyEnum.TermObjectsConnectionOrderbyEnum
    , padCounts : OptionalArgument Bool
    , parent : OptionalArgument Int
    , search : OptionalArgument String
    , shouldOnlyIncludeConnectedItems : OptionalArgument Bool
    , shouldOutputInFlatList : OptionalArgument Bool
    , slug : OptionalArgument (List (Maybe String))
    , termTaxonomId : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , updateTermMetaCache : OptionalArgument Bool
    }


{-| Type for the PostToCategoryConnectionWhereArgs input object.
-}
type alias PostToCategoryConnectionWhereArgs =
    { cacheDomain : OptionalArgument String
    , childless : OptionalArgument Bool
    , childOf : OptionalArgument Int
    , descriptionLike : OptionalArgument String
    , exclude : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , excludeTree : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , hideEmpty : OptionalArgument Bool
    , hierarchical : OptionalArgument Bool
    , include : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , name : OptionalArgument (List (Maybe String))
    , nameLike : OptionalArgument String
    , objectIds : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument Wordpress.Enum.TermObjectsConnectionOrderbyEnum.TermObjectsConnectionOrderbyEnum
    , padCounts : OptionalArgument Bool
    , parent : OptionalArgument Int
    , search : OptionalArgument String
    , shouldOnlyIncludeConnectedItems : OptionalArgument Bool
    , shouldOutputInFlatList : OptionalArgument Bool
    , slug : OptionalArgument (List (Maybe String))
    , termTaxonomId : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , updateTermMetaCache : OptionalArgument Bool
    }


{-| Encode a PostToCategoryConnectionWhereArgs into a value that can be used as an argument.
-}
encodePostToCategoryConnectionWhereArgs : PostToCategoryConnectionWhereArgs -> Value
encodePostToCategoryConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "cacheDomain", Encode.string |> Encode.optional input.cacheDomain ), ( "childless", Encode.bool |> Encode.optional input.childless ), ( "childOf", Encode.int |> Encode.optional input.childOf ), ( "descriptionLike", Encode.string |> Encode.optional input.descriptionLike ), ( "exclude", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.exclude ), ( "excludeTree", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.excludeTree ), ( "hideEmpty", Encode.bool |> Encode.optional input.hideEmpty ), ( "hierarchical", Encode.bool |> Encode.optional input.hierarchical ), ( "include", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.include ), ( "name", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.name ), ( "nameLike", Encode.string |> Encode.optional input.nameLike ), ( "objectIds", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.objectIds ), ( "orderby", Encode.enum Wordpress.Enum.TermObjectsConnectionOrderbyEnum.toString |> Encode.optional input.orderby ), ( "padCounts", Encode.bool |> Encode.optional input.padCounts ), ( "parent", Encode.int |> Encode.optional input.parent ), ( "search", Encode.string |> Encode.optional input.search ), ( "shouldOnlyIncludeConnectedItems", Encode.bool |> Encode.optional input.shouldOnlyIncludeConnectedItems ), ( "shouldOutputInFlatList", Encode.bool |> Encode.optional input.shouldOutputInFlatList ), ( "slug", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.slug ), ( "termTaxonomId", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.termTaxonomId ), ( "updateTermMetaCache", Encode.bool |> Encode.optional input.updateTermMetaCache ) ]


buildPostToCommentConnectionWhereArgs : (PostToCommentConnectionWhereArgsOptionalFields -> PostToCommentConnectionWhereArgsOptionalFields) -> PostToCommentConnectionWhereArgs
buildPostToCommentConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { authorEmail = Absent, authorIn = Absent, authorNotIn = Absent, authorUrl = Absent, commentIn = Absent, commentNotIn = Absent, commentType = Absent, commentTypeIn = Absent, commentTypeNotIn = Absent, contentAuthor = Absent, contentAuthorIn = Absent, contentAuthorNotIn = Absent, contentId = Absent, contentIdIn = Absent, contentIdNotIn = Absent, contentName = Absent, contentParent = Absent, contentStatus = Absent, contentType = Absent, includeUnapproved = Absent, karma = Absent, order = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, search = Absent, status = Absent, userId = Absent }
    in
    { authorEmail = optionals.authorEmail, authorIn = optionals.authorIn, authorNotIn = optionals.authorNotIn, authorUrl = optionals.authorUrl, commentIn = optionals.commentIn, commentNotIn = optionals.commentNotIn, commentType = optionals.commentType, commentTypeIn = optionals.commentTypeIn, commentTypeNotIn = optionals.commentTypeNotIn, contentAuthor = optionals.contentAuthor, contentAuthorIn = optionals.contentAuthorIn, contentAuthorNotIn = optionals.contentAuthorNotIn, contentId = optionals.contentId, contentIdIn = optionals.contentIdIn, contentIdNotIn = optionals.contentIdNotIn, contentName = optionals.contentName, contentParent = optionals.contentParent, contentStatus = optionals.contentStatus, contentType = optionals.contentType, includeUnapproved = optionals.includeUnapproved, karma = optionals.karma, order = optionals.order, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, search = optionals.search, status = optionals.status, userId = optionals.userId }


type alias PostToCommentConnectionWhereArgsOptionalFields =
    { authorEmail : OptionalArgument String
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorUrl : OptionalArgument String
    , commentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentType : OptionalArgument String
    , commentTypeIn : OptionalArgument (List (Maybe String))
    , commentTypeNotIn : OptionalArgument String
    , contentAuthor : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , contentIdIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentIdNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentName : OptionalArgument String
    , contentParent : OptionalArgument Int
    , contentStatus : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , contentType : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , includeUnapproved : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , karma : OptionalArgument Int
    , order : OptionalArgument Wordpress.Enum.OrderEnum.OrderEnum
    , orderby : OptionalArgument Wordpress.Enum.CommentsConnectionOrderbyEnum.CommentsConnectionOrderbyEnum
    , parent : OptionalArgument Int
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , search : OptionalArgument String
    , status : OptionalArgument String
    , userId : OptionalArgument Wordpress.ScalarCodecs.Id
    }


{-| Type for the PostToCommentConnectionWhereArgs input object.
-}
type alias PostToCommentConnectionWhereArgs =
    { authorEmail : OptionalArgument String
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorUrl : OptionalArgument String
    , commentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentType : OptionalArgument String
    , commentTypeIn : OptionalArgument (List (Maybe String))
    , commentTypeNotIn : OptionalArgument String
    , contentAuthor : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , contentIdIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentIdNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentName : OptionalArgument String
    , contentParent : OptionalArgument Int
    , contentStatus : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , contentType : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , includeUnapproved : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , karma : OptionalArgument Int
    , order : OptionalArgument Wordpress.Enum.OrderEnum.OrderEnum
    , orderby : OptionalArgument Wordpress.Enum.CommentsConnectionOrderbyEnum.CommentsConnectionOrderbyEnum
    , parent : OptionalArgument Int
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , search : OptionalArgument String
    , status : OptionalArgument String
    , userId : OptionalArgument Wordpress.ScalarCodecs.Id
    }


{-| Encode a PostToCommentConnectionWhereArgs into a value that can be used as an argument.
-}
encodePostToCommentConnectionWhereArgs : PostToCommentConnectionWhereArgs -> Value
encodePostToCommentConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "authorEmail", Encode.string |> Encode.optional input.authorEmail ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "authorUrl", Encode.string |> Encode.optional input.authorUrl ), ( "commentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.commentIn ), ( "commentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.commentNotIn ), ( "commentType", Encode.string |> Encode.optional input.commentType ), ( "commentTypeIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.commentTypeIn ), ( "commentTypeNotIn", Encode.string |> Encode.optional input.commentTypeNotIn ), ( "contentAuthor", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthor ), ( "contentAuthorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthorIn ), ( "contentAuthorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthorNotIn ), ( "contentId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.contentId ), ( "contentIdIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentIdIn ), ( "contentIdNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentIdNotIn ), ( "contentName", Encode.string |> Encode.optional input.contentName ), ( "contentParent", Encode.int |> Encode.optional input.contentParent ), ( "contentStatus", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.contentStatus ), ( "contentType", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.contentType ), ( "includeUnapproved", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.includeUnapproved ), ( "karma", Encode.int |> Encode.optional input.karma ), ( "order", Encode.enum Wordpress.Enum.OrderEnum.toString |> Encode.optional input.order ), ( "orderby", Encode.enum Wordpress.Enum.CommentsConnectionOrderbyEnum.toString |> Encode.optional input.orderby ), ( "parent", Encode.int |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "search", Encode.string |> Encode.optional input.search ), ( "status", Encode.string |> Encode.optional input.status ), ( "userId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.userId ) ]


buildPostToTagConnectionWhereArgs : (PostToTagConnectionWhereArgsOptionalFields -> PostToTagConnectionWhereArgsOptionalFields) -> PostToTagConnectionWhereArgs
buildPostToTagConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { cacheDomain = Absent, childless = Absent, childOf = Absent, descriptionLike = Absent, exclude = Absent, excludeTree = Absent, hideEmpty = Absent, hierarchical = Absent, include = Absent, name = Absent, nameLike = Absent, objectIds = Absent, orderby = Absent, padCounts = Absent, parent = Absent, search = Absent, shouldOnlyIncludeConnectedItems = Absent, shouldOutputInFlatList = Absent, slug = Absent, termTaxonomId = Absent, updateTermMetaCache = Absent }
    in
    { cacheDomain = optionals.cacheDomain, childless = optionals.childless, childOf = optionals.childOf, descriptionLike = optionals.descriptionLike, exclude = optionals.exclude, excludeTree = optionals.excludeTree, hideEmpty = optionals.hideEmpty, hierarchical = optionals.hierarchical, include = optionals.include, name = optionals.name, nameLike = optionals.nameLike, objectIds = optionals.objectIds, orderby = optionals.orderby, padCounts = optionals.padCounts, parent = optionals.parent, search = optionals.search, shouldOnlyIncludeConnectedItems = optionals.shouldOnlyIncludeConnectedItems, shouldOutputInFlatList = optionals.shouldOutputInFlatList, slug = optionals.slug, termTaxonomId = optionals.termTaxonomId, updateTermMetaCache = optionals.updateTermMetaCache }


type alias PostToTagConnectionWhereArgsOptionalFields =
    { cacheDomain : OptionalArgument String
    , childless : OptionalArgument Bool
    , childOf : OptionalArgument Int
    , descriptionLike : OptionalArgument String
    , exclude : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , excludeTree : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , hideEmpty : OptionalArgument Bool
    , hierarchical : OptionalArgument Bool
    , include : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , name : OptionalArgument (List (Maybe String))
    , nameLike : OptionalArgument String
    , objectIds : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument Wordpress.Enum.TermObjectsConnectionOrderbyEnum.TermObjectsConnectionOrderbyEnum
    , padCounts : OptionalArgument Bool
    , parent : OptionalArgument Int
    , search : OptionalArgument String
    , shouldOnlyIncludeConnectedItems : OptionalArgument Bool
    , shouldOutputInFlatList : OptionalArgument Bool
    , slug : OptionalArgument (List (Maybe String))
    , termTaxonomId : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , updateTermMetaCache : OptionalArgument Bool
    }


{-| Type for the PostToTagConnectionWhereArgs input object.
-}
type alias PostToTagConnectionWhereArgs =
    { cacheDomain : OptionalArgument String
    , childless : OptionalArgument Bool
    , childOf : OptionalArgument Int
    , descriptionLike : OptionalArgument String
    , exclude : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , excludeTree : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , hideEmpty : OptionalArgument Bool
    , hierarchical : OptionalArgument Bool
    , include : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , name : OptionalArgument (List (Maybe String))
    , nameLike : OptionalArgument String
    , objectIds : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument Wordpress.Enum.TermObjectsConnectionOrderbyEnum.TermObjectsConnectionOrderbyEnum
    , padCounts : OptionalArgument Bool
    , parent : OptionalArgument Int
    , search : OptionalArgument String
    , shouldOnlyIncludeConnectedItems : OptionalArgument Bool
    , shouldOutputInFlatList : OptionalArgument Bool
    , slug : OptionalArgument (List (Maybe String))
    , termTaxonomId : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , updateTermMetaCache : OptionalArgument Bool
    }


{-| Encode a PostToTagConnectionWhereArgs into a value that can be used as an argument.
-}
encodePostToTagConnectionWhereArgs : PostToTagConnectionWhereArgs -> Value
encodePostToTagConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "cacheDomain", Encode.string |> Encode.optional input.cacheDomain ), ( "childless", Encode.bool |> Encode.optional input.childless ), ( "childOf", Encode.int |> Encode.optional input.childOf ), ( "descriptionLike", Encode.string |> Encode.optional input.descriptionLike ), ( "exclude", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.exclude ), ( "excludeTree", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.excludeTree ), ( "hideEmpty", Encode.bool |> Encode.optional input.hideEmpty ), ( "hierarchical", Encode.bool |> Encode.optional input.hierarchical ), ( "include", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.include ), ( "name", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.name ), ( "nameLike", Encode.string |> Encode.optional input.nameLike ), ( "objectIds", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.objectIds ), ( "orderby", Encode.enum Wordpress.Enum.TermObjectsConnectionOrderbyEnum.toString |> Encode.optional input.orderby ), ( "padCounts", Encode.bool |> Encode.optional input.padCounts ), ( "parent", Encode.int |> Encode.optional input.parent ), ( "search", Encode.string |> Encode.optional input.search ), ( "shouldOnlyIncludeConnectedItems", Encode.bool |> Encode.optional input.shouldOnlyIncludeConnectedItems ), ( "shouldOutputInFlatList", Encode.bool |> Encode.optional input.shouldOutputInFlatList ), ( "slug", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.slug ), ( "termTaxonomId", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.termTaxonomId ), ( "updateTermMetaCache", Encode.bool |> Encode.optional input.updateTermMetaCache ) ]


buildRefreshJwtAuthTokenInput : RefreshJwtAuthTokenInputRequiredFields -> RefreshJwtAuthTokenInput
buildRefreshJwtAuthTokenInput required =
    { jwtRefreshToken = required.jwtRefreshToken, clientMutationId = required.clientMutationId }


type alias RefreshJwtAuthTokenInputRequiredFields =
    { jwtRefreshToken : String
    , clientMutationId : String
    }


{-| Type for the RefreshJwtAuthTokenInput input object.
-}
type alias RefreshJwtAuthTokenInput =
    { jwtRefreshToken : String
    , clientMutationId : String
    }


{-| Encode a RefreshJwtAuthTokenInput into a value that can be used as an argument.
-}
encodeRefreshJwtAuthTokenInput : RefreshJwtAuthTokenInput -> Value
encodeRefreshJwtAuthTokenInput input =
    Encode.maybeObject
        [ ( "jwtRefreshToken", Encode.string input.jwtRefreshToken |> Just ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ) ]


buildRegisterUserInput : RegisterUserInputRequiredFields -> (RegisterUserInputOptionalFields -> RegisterUserInputOptionalFields) -> RegisterUserInput
buildRegisterUserInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { aim = Absent, description = Absent, displayName = Absent, email = Absent, firstName = Absent, jabber = Absent, lastName = Absent, locale = Absent, nicename = Absent, nickname = Absent, password = Absent, registered = Absent, richEditing = Absent, roles = Absent, websiteUrl = Absent, yim = Absent }
    in
    { aim = optionals.aim, clientMutationId = required.clientMutationId, description = optionals.description, displayName = optionals.displayName, email = optionals.email, firstName = optionals.firstName, jabber = optionals.jabber, lastName = optionals.lastName, locale = optionals.locale, nicename = optionals.nicename, nickname = optionals.nickname, password = optionals.password, registered = optionals.registered, richEditing = optionals.richEditing, roles = optionals.roles, username = required.username, websiteUrl = optionals.websiteUrl, yim = optionals.yim }


type alias RegisterUserInputRequiredFields =
    { clientMutationId : String
    , username : String
    }


type alias RegisterUserInputOptionalFields =
    { aim : OptionalArgument String
    , description : OptionalArgument String
    , displayName : OptionalArgument String
    , email : OptionalArgument String
    , firstName : OptionalArgument String
    , jabber : OptionalArgument String
    , lastName : OptionalArgument String
    , locale : OptionalArgument String
    , nicename : OptionalArgument String
    , nickname : OptionalArgument String
    , password : OptionalArgument String
    , registered : OptionalArgument String
    , richEditing : OptionalArgument String
    , roles : OptionalArgument (List (Maybe String))
    , websiteUrl : OptionalArgument String
    , yim : OptionalArgument String
    }


{-| Type for the RegisterUserInput input object.
-}
type alias RegisterUserInput =
    { aim : OptionalArgument String
    , clientMutationId : String
    , description : OptionalArgument String
    , displayName : OptionalArgument String
    , email : OptionalArgument String
    , firstName : OptionalArgument String
    , jabber : OptionalArgument String
    , lastName : OptionalArgument String
    , locale : OptionalArgument String
    , nicename : OptionalArgument String
    , nickname : OptionalArgument String
    , password : OptionalArgument String
    , registered : OptionalArgument String
    , richEditing : OptionalArgument String
    , roles : OptionalArgument (List (Maybe String))
    , username : String
    , websiteUrl : OptionalArgument String
    , yim : OptionalArgument String
    }


{-| Encode a RegisterUserInput into a value that can be used as an argument.
-}
encodeRegisterUserInput : RegisterUserInput -> Value
encodeRegisterUserInput input =
    Encode.maybeObject
        [ ( "aim", Encode.string |> Encode.optional input.aim ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "displayName", Encode.string |> Encode.optional input.displayName ), ( "email", Encode.string |> Encode.optional input.email ), ( "firstName", Encode.string |> Encode.optional input.firstName ), ( "jabber", Encode.string |> Encode.optional input.jabber ), ( "lastName", Encode.string |> Encode.optional input.lastName ), ( "locale", Encode.string |> Encode.optional input.locale ), ( "nicename", Encode.string |> Encode.optional input.nicename ), ( "nickname", Encode.string |> Encode.optional input.nickname ), ( "password", Encode.string |> Encode.optional input.password ), ( "registered", Encode.string |> Encode.optional input.registered ), ( "richEditing", Encode.string |> Encode.optional input.richEditing ), ( "roles", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.roles ), ( "username", Encode.string input.username |> Just ), ( "websiteUrl", Encode.string |> Encode.optional input.websiteUrl ), ( "yim", Encode.string |> Encode.optional input.yim ) ]


buildResetUserPasswordInput : ResetUserPasswordInputRequiredFields -> (ResetUserPasswordInputOptionalFields -> ResetUserPasswordInputOptionalFields) -> ResetUserPasswordInput
buildResetUserPasswordInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { key = Absent, login = Absent, password = Absent }
    in
    { clientMutationId = required.clientMutationId, key = optionals.key, login = optionals.login, password = optionals.password }


type alias ResetUserPasswordInputRequiredFields =
    { clientMutationId : String }


type alias ResetUserPasswordInputOptionalFields =
    { key : OptionalArgument String
    , login : OptionalArgument String
    , password : OptionalArgument String
    }


{-| Type for the ResetUserPasswordInput input object.
-}
type alias ResetUserPasswordInput =
    { clientMutationId : String
    , key : OptionalArgument String
    , login : OptionalArgument String
    , password : OptionalArgument String
    }


{-| Encode a ResetUserPasswordInput into a value that can be used as an argument.
-}
encodeResetUserPasswordInput : ResetUserPasswordInput -> Value
encodeResetUserPasswordInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "key", Encode.string |> Encode.optional input.key ), ( "login", Encode.string |> Encode.optional input.login ), ( "password", Encode.string |> Encode.optional input.password ) ]


buildRestoreCommentInput : RestoreCommentInputRequiredFields -> RestoreCommentInput
buildRestoreCommentInput required =
    { clientMutationId = required.clientMutationId, id = required.id }


type alias RestoreCommentInputRequiredFields =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


{-| Type for the RestoreCommentInput input object.
-}
type alias RestoreCommentInput =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


{-| Encode a RestoreCommentInput into a value that can be used as an argument.
-}
encodeRestoreCommentInput : RestoreCommentInput -> Value
encodeRestoreCommentInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) input.id |> Just ) ]


buildRootQueryToCategoryConnectionWhereArgs : (RootQueryToCategoryConnectionWhereArgsOptionalFields -> RootQueryToCategoryConnectionWhereArgsOptionalFields) -> RootQueryToCategoryConnectionWhereArgs
buildRootQueryToCategoryConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { cacheDomain = Absent, childless = Absent, childOf = Absent, descriptionLike = Absent, exclude = Absent, excludeTree = Absent, hideEmpty = Absent, hierarchical = Absent, include = Absent, name = Absent, nameLike = Absent, objectIds = Absent, orderby = Absent, padCounts = Absent, parent = Absent, search = Absent, shouldOnlyIncludeConnectedItems = Absent, shouldOutputInFlatList = Absent, slug = Absent, termTaxonomId = Absent, updateTermMetaCache = Absent }
    in
    { cacheDomain = optionals.cacheDomain, childless = optionals.childless, childOf = optionals.childOf, descriptionLike = optionals.descriptionLike, exclude = optionals.exclude, excludeTree = optionals.excludeTree, hideEmpty = optionals.hideEmpty, hierarchical = optionals.hierarchical, include = optionals.include, name = optionals.name, nameLike = optionals.nameLike, objectIds = optionals.objectIds, orderby = optionals.orderby, padCounts = optionals.padCounts, parent = optionals.parent, search = optionals.search, shouldOnlyIncludeConnectedItems = optionals.shouldOnlyIncludeConnectedItems, shouldOutputInFlatList = optionals.shouldOutputInFlatList, slug = optionals.slug, termTaxonomId = optionals.termTaxonomId, updateTermMetaCache = optionals.updateTermMetaCache }


type alias RootQueryToCategoryConnectionWhereArgsOptionalFields =
    { cacheDomain : OptionalArgument String
    , childless : OptionalArgument Bool
    , childOf : OptionalArgument Int
    , descriptionLike : OptionalArgument String
    , exclude : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , excludeTree : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , hideEmpty : OptionalArgument Bool
    , hierarchical : OptionalArgument Bool
    , include : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , name : OptionalArgument (List (Maybe String))
    , nameLike : OptionalArgument String
    , objectIds : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument Wordpress.Enum.TermObjectsConnectionOrderbyEnum.TermObjectsConnectionOrderbyEnum
    , padCounts : OptionalArgument Bool
    , parent : OptionalArgument Int
    , search : OptionalArgument String
    , shouldOnlyIncludeConnectedItems : OptionalArgument Bool
    , shouldOutputInFlatList : OptionalArgument Bool
    , slug : OptionalArgument (List (Maybe String))
    , termTaxonomId : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , updateTermMetaCache : OptionalArgument Bool
    }


{-| Type for the RootQueryToCategoryConnectionWhereArgs input object.
-}
type alias RootQueryToCategoryConnectionWhereArgs =
    { cacheDomain : OptionalArgument String
    , childless : OptionalArgument Bool
    , childOf : OptionalArgument Int
    , descriptionLike : OptionalArgument String
    , exclude : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , excludeTree : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , hideEmpty : OptionalArgument Bool
    , hierarchical : OptionalArgument Bool
    , include : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , name : OptionalArgument (List (Maybe String))
    , nameLike : OptionalArgument String
    , objectIds : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument Wordpress.Enum.TermObjectsConnectionOrderbyEnum.TermObjectsConnectionOrderbyEnum
    , padCounts : OptionalArgument Bool
    , parent : OptionalArgument Int
    , search : OptionalArgument String
    , shouldOnlyIncludeConnectedItems : OptionalArgument Bool
    , shouldOutputInFlatList : OptionalArgument Bool
    , slug : OptionalArgument (List (Maybe String))
    , termTaxonomId : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , updateTermMetaCache : OptionalArgument Bool
    }


{-| Encode a RootQueryToCategoryConnectionWhereArgs into a value that can be used as an argument.
-}
encodeRootQueryToCategoryConnectionWhereArgs : RootQueryToCategoryConnectionWhereArgs -> Value
encodeRootQueryToCategoryConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "cacheDomain", Encode.string |> Encode.optional input.cacheDomain ), ( "childless", Encode.bool |> Encode.optional input.childless ), ( "childOf", Encode.int |> Encode.optional input.childOf ), ( "descriptionLike", Encode.string |> Encode.optional input.descriptionLike ), ( "exclude", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.exclude ), ( "excludeTree", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.excludeTree ), ( "hideEmpty", Encode.bool |> Encode.optional input.hideEmpty ), ( "hierarchical", Encode.bool |> Encode.optional input.hierarchical ), ( "include", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.include ), ( "name", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.name ), ( "nameLike", Encode.string |> Encode.optional input.nameLike ), ( "objectIds", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.objectIds ), ( "orderby", Encode.enum Wordpress.Enum.TermObjectsConnectionOrderbyEnum.toString |> Encode.optional input.orderby ), ( "padCounts", Encode.bool |> Encode.optional input.padCounts ), ( "parent", Encode.int |> Encode.optional input.parent ), ( "search", Encode.string |> Encode.optional input.search ), ( "shouldOnlyIncludeConnectedItems", Encode.bool |> Encode.optional input.shouldOnlyIncludeConnectedItems ), ( "shouldOutputInFlatList", Encode.bool |> Encode.optional input.shouldOutputInFlatList ), ( "slug", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.slug ), ( "termTaxonomId", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.termTaxonomId ), ( "updateTermMetaCache", Encode.bool |> Encode.optional input.updateTermMetaCache ) ]


buildRootQueryToCommentConnectionWhereArgs : (RootQueryToCommentConnectionWhereArgsOptionalFields -> RootQueryToCommentConnectionWhereArgsOptionalFields) -> RootQueryToCommentConnectionWhereArgs
buildRootQueryToCommentConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { authorEmail = Absent, authorIn = Absent, authorNotIn = Absent, authorUrl = Absent, commentIn = Absent, commentNotIn = Absent, commentType = Absent, commentTypeIn = Absent, commentTypeNotIn = Absent, contentAuthor = Absent, contentAuthorIn = Absent, contentAuthorNotIn = Absent, contentId = Absent, contentIdIn = Absent, contentIdNotIn = Absent, contentName = Absent, contentParent = Absent, contentStatus = Absent, contentType = Absent, includeUnapproved = Absent, karma = Absent, order = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, search = Absent, status = Absent, userId = Absent }
    in
    { authorEmail = optionals.authorEmail, authorIn = optionals.authorIn, authorNotIn = optionals.authorNotIn, authorUrl = optionals.authorUrl, commentIn = optionals.commentIn, commentNotIn = optionals.commentNotIn, commentType = optionals.commentType, commentTypeIn = optionals.commentTypeIn, commentTypeNotIn = optionals.commentTypeNotIn, contentAuthor = optionals.contentAuthor, contentAuthorIn = optionals.contentAuthorIn, contentAuthorNotIn = optionals.contentAuthorNotIn, contentId = optionals.contentId, contentIdIn = optionals.contentIdIn, contentIdNotIn = optionals.contentIdNotIn, contentName = optionals.contentName, contentParent = optionals.contentParent, contentStatus = optionals.contentStatus, contentType = optionals.contentType, includeUnapproved = optionals.includeUnapproved, karma = optionals.karma, order = optionals.order, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, search = optionals.search, status = optionals.status, userId = optionals.userId }


type alias RootQueryToCommentConnectionWhereArgsOptionalFields =
    { authorEmail : OptionalArgument String
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorUrl : OptionalArgument String
    , commentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentType : OptionalArgument String
    , commentTypeIn : OptionalArgument (List (Maybe String))
    , commentTypeNotIn : OptionalArgument String
    , contentAuthor : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , contentIdIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentIdNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentName : OptionalArgument String
    , contentParent : OptionalArgument Int
    , contentStatus : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , contentType : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , includeUnapproved : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , karma : OptionalArgument Int
    , order : OptionalArgument Wordpress.Enum.OrderEnum.OrderEnum
    , orderby : OptionalArgument Wordpress.Enum.CommentsConnectionOrderbyEnum.CommentsConnectionOrderbyEnum
    , parent : OptionalArgument Int
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , search : OptionalArgument String
    , status : OptionalArgument String
    , userId : OptionalArgument Wordpress.ScalarCodecs.Id
    }


{-| Type for the RootQueryToCommentConnectionWhereArgs input object.
-}
type alias RootQueryToCommentConnectionWhereArgs =
    { authorEmail : OptionalArgument String
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorUrl : OptionalArgument String
    , commentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentType : OptionalArgument String
    , commentTypeIn : OptionalArgument (List (Maybe String))
    , commentTypeNotIn : OptionalArgument String
    , contentAuthor : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , contentIdIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentIdNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentName : OptionalArgument String
    , contentParent : OptionalArgument Int
    , contentStatus : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , contentType : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , includeUnapproved : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , karma : OptionalArgument Int
    , order : OptionalArgument Wordpress.Enum.OrderEnum.OrderEnum
    , orderby : OptionalArgument Wordpress.Enum.CommentsConnectionOrderbyEnum.CommentsConnectionOrderbyEnum
    , parent : OptionalArgument Int
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , search : OptionalArgument String
    , status : OptionalArgument String
    , userId : OptionalArgument Wordpress.ScalarCodecs.Id
    }


{-| Encode a RootQueryToCommentConnectionWhereArgs into a value that can be used as an argument.
-}
encodeRootQueryToCommentConnectionWhereArgs : RootQueryToCommentConnectionWhereArgs -> Value
encodeRootQueryToCommentConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "authorEmail", Encode.string |> Encode.optional input.authorEmail ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "authorUrl", Encode.string |> Encode.optional input.authorUrl ), ( "commentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.commentIn ), ( "commentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.commentNotIn ), ( "commentType", Encode.string |> Encode.optional input.commentType ), ( "commentTypeIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.commentTypeIn ), ( "commentTypeNotIn", Encode.string |> Encode.optional input.commentTypeNotIn ), ( "contentAuthor", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthor ), ( "contentAuthorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthorIn ), ( "contentAuthorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthorNotIn ), ( "contentId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.contentId ), ( "contentIdIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentIdIn ), ( "contentIdNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentIdNotIn ), ( "contentName", Encode.string |> Encode.optional input.contentName ), ( "contentParent", Encode.int |> Encode.optional input.contentParent ), ( "contentStatus", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.contentStatus ), ( "contentType", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.contentType ), ( "includeUnapproved", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.includeUnapproved ), ( "karma", Encode.int |> Encode.optional input.karma ), ( "order", Encode.enum Wordpress.Enum.OrderEnum.toString |> Encode.optional input.order ), ( "orderby", Encode.enum Wordpress.Enum.CommentsConnectionOrderbyEnum.toString |> Encode.optional input.orderby ), ( "parent", Encode.int |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "search", Encode.string |> Encode.optional input.search ), ( "status", Encode.string |> Encode.optional input.status ), ( "userId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.userId ) ]


buildRootQueryToMediaItemConnectionWhereArgs : (RootQueryToMediaItemConnectionWhereArgsOptionalFields -> RootQueryToMediaItemConnectionWhereArgsOptionalFields) -> RootQueryToMediaItemConnectionWhereArgs
buildRootQueryToMediaItemConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { author = Absent, authorIn = Absent, authorName = Absent, authorNotIn = Absent, categoryId = Absent, categoryIn = Absent, categoryName = Absent, categoryNotIn = Absent, dateQuery = Absent, hasPassword = Absent, id = Absent, in_ = Absent, mimeType = Absent, name = Absent, nameIn = Absent, notIn = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, password = Absent, search = Absent, stati = Absent, status = Absent, tag = Absent, tagId = Absent, tagIn = Absent, tagNotIn = Absent, tagSlugAnd = Absent, tagSlugIn = Absent, title = Absent }
    in
    { author = optionals.author, authorIn = optionals.authorIn, authorName = optionals.authorName, authorNotIn = optionals.authorNotIn, categoryId = optionals.categoryId, categoryIn = optionals.categoryIn, categoryName = optionals.categoryName, categoryNotIn = optionals.categoryNotIn, dateQuery = optionals.dateQuery, hasPassword = optionals.hasPassword, id = optionals.id, in_ = optionals.in_, mimeType = optionals.mimeType, name = optionals.name, nameIn = optionals.nameIn, notIn = optionals.notIn, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, password = optionals.password, search = optionals.search, stati = optionals.stati, status = optionals.status, tag = optionals.tag, tagId = optionals.tagId, tagIn = optionals.tagIn, tagNotIn = optionals.tagNotIn, tagSlugAnd = optionals.tagSlugAnd, tagSlugIn = optionals.tagSlugIn, title = optionals.title }


type alias RootQueryToMediaItemConnectionWhereArgsOptionalFields =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Type for the RootQueryToMediaItemConnectionWhereArgs input object.
-}
type alias RootQueryToMediaItemConnectionWhereArgs =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Encode a RootQueryToMediaItemConnectionWhereArgs into a value that can be used as an argument.
-}
encodeRootQueryToMediaItemConnectionWhereArgs : RootQueryToMediaItemConnectionWhereArgs -> Value
encodeRootQueryToMediaItemConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "author", Encode.int |> Encode.optional input.author ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorName", Encode.string |> Encode.optional input.authorName ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "categoryId", Encode.int |> Encode.optional input.categoryId ), ( "categoryIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryIn ), ( "categoryName", Encode.string |> Encode.optional input.categoryName ), ( "categoryNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryNotIn ), ( "dateQuery", encodeDateQueryInput |> Encode.optional input.dateQuery ), ( "hasPassword", Encode.bool |> Encode.optional input.hasPassword ), ( "id", Encode.int |> Encode.optional input.id ), ( "in", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.in_ ), ( "mimeType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.mimeType ), ( "name", Encode.string |> Encode.optional input.name ), ( "nameIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.nameIn ), ( "notIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.notIn ), ( "orderby", (encodePostObjectsConnectionOrderbyInput |> Encode.maybe |> Encode.list) |> Encode.optional input.orderby ), ( "parent", Encode.string |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "password", Encode.string |> Encode.optional input.password ), ( "search", Encode.string |> Encode.optional input.search ), ( "stati", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.stati ), ( "status", Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.optional input.status ), ( "tag", Encode.string |> Encode.optional input.tag ), ( "tagId", Encode.string |> Encode.optional input.tagId ), ( "tagIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagIn ), ( "tagNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagNotIn ), ( "tagSlugAnd", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugAnd ), ( "tagSlugIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugIn ), ( "title", Encode.string |> Encode.optional input.title ) ]


buildRootQueryToMenuConnectionWhereArgs : (RootQueryToMenuConnectionWhereArgsOptionalFields -> RootQueryToMenuConnectionWhereArgsOptionalFields) -> RootQueryToMenuConnectionWhereArgs
buildRootQueryToMenuConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, location = Absent, slug = Absent }
    in
    { id = optionals.id, location = optionals.location, slug = optionals.slug }


type alias RootQueryToMenuConnectionWhereArgsOptionalFields =
    { id : OptionalArgument Int
    , location : OptionalArgument Wordpress.Enum.MenuLocationEnum.MenuLocationEnum
    , slug : OptionalArgument String
    }


{-| Type for the RootQueryToMenuConnectionWhereArgs input object.
-}
type alias RootQueryToMenuConnectionWhereArgs =
    { id : OptionalArgument Int
    , location : OptionalArgument Wordpress.Enum.MenuLocationEnum.MenuLocationEnum
    , slug : OptionalArgument String
    }


{-| Encode a RootQueryToMenuConnectionWhereArgs into a value that can be used as an argument.
-}
encodeRootQueryToMenuConnectionWhereArgs : RootQueryToMenuConnectionWhereArgs -> Value
encodeRootQueryToMenuConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input.id ), ( "location", Encode.enum Wordpress.Enum.MenuLocationEnum.toString |> Encode.optional input.location ), ( "slug", Encode.string |> Encode.optional input.slug ) ]


buildRootQueryToMenuItemConnectionWhereArgs : (RootQueryToMenuItemConnectionWhereArgsOptionalFields -> RootQueryToMenuItemConnectionWhereArgsOptionalFields) -> RootQueryToMenuItemConnectionWhereArgs
buildRootQueryToMenuItemConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, location = Absent }
    in
    { id = optionals.id, location = optionals.location }


type alias RootQueryToMenuItemConnectionWhereArgsOptionalFields =
    { id : OptionalArgument Int
    , location : OptionalArgument Wordpress.Enum.MenuLocationEnum.MenuLocationEnum
    }


{-| Type for the RootQueryToMenuItemConnectionWhereArgs input object.
-}
type alias RootQueryToMenuItemConnectionWhereArgs =
    { id : OptionalArgument Int
    , location : OptionalArgument Wordpress.Enum.MenuLocationEnum.MenuLocationEnum
    }


{-| Encode a RootQueryToMenuItemConnectionWhereArgs into a value that can be used as an argument.
-}
encodeRootQueryToMenuItemConnectionWhereArgs : RootQueryToMenuItemConnectionWhereArgs -> Value
encodeRootQueryToMenuItemConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input.id ), ( "location", Encode.enum Wordpress.Enum.MenuLocationEnum.toString |> Encode.optional input.location ) ]


buildRootQueryToPageConnectionWhereArgs : (RootQueryToPageConnectionWhereArgsOptionalFields -> RootQueryToPageConnectionWhereArgsOptionalFields) -> RootQueryToPageConnectionWhereArgs
buildRootQueryToPageConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { author = Absent, authorIn = Absent, authorName = Absent, authorNotIn = Absent, categoryId = Absent, categoryIn = Absent, categoryName = Absent, categoryNotIn = Absent, dateQuery = Absent, hasPassword = Absent, id = Absent, in_ = Absent, mimeType = Absent, name = Absent, nameIn = Absent, notIn = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, password = Absent, search = Absent, stati = Absent, status = Absent, tag = Absent, tagId = Absent, tagIn = Absent, tagNotIn = Absent, tagSlugAnd = Absent, tagSlugIn = Absent, title = Absent }
    in
    { author = optionals.author, authorIn = optionals.authorIn, authorName = optionals.authorName, authorNotIn = optionals.authorNotIn, categoryId = optionals.categoryId, categoryIn = optionals.categoryIn, categoryName = optionals.categoryName, categoryNotIn = optionals.categoryNotIn, dateQuery = optionals.dateQuery, hasPassword = optionals.hasPassword, id = optionals.id, in_ = optionals.in_, mimeType = optionals.mimeType, name = optionals.name, nameIn = optionals.nameIn, notIn = optionals.notIn, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, password = optionals.password, search = optionals.search, stati = optionals.stati, status = optionals.status, tag = optionals.tag, tagId = optionals.tagId, tagIn = optionals.tagIn, tagNotIn = optionals.tagNotIn, tagSlugAnd = optionals.tagSlugAnd, tagSlugIn = optionals.tagSlugIn, title = optionals.title }


type alias RootQueryToPageConnectionWhereArgsOptionalFields =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Type for the RootQueryToPageConnectionWhereArgs input object.
-}
type alias RootQueryToPageConnectionWhereArgs =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Encode a RootQueryToPageConnectionWhereArgs into a value that can be used as an argument.
-}
encodeRootQueryToPageConnectionWhereArgs : RootQueryToPageConnectionWhereArgs -> Value
encodeRootQueryToPageConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "author", Encode.int |> Encode.optional input.author ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorName", Encode.string |> Encode.optional input.authorName ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "categoryId", Encode.int |> Encode.optional input.categoryId ), ( "categoryIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryIn ), ( "categoryName", Encode.string |> Encode.optional input.categoryName ), ( "categoryNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryNotIn ), ( "dateQuery", encodeDateQueryInput |> Encode.optional input.dateQuery ), ( "hasPassword", Encode.bool |> Encode.optional input.hasPassword ), ( "id", Encode.int |> Encode.optional input.id ), ( "in", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.in_ ), ( "mimeType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.mimeType ), ( "name", Encode.string |> Encode.optional input.name ), ( "nameIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.nameIn ), ( "notIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.notIn ), ( "orderby", (encodePostObjectsConnectionOrderbyInput |> Encode.maybe |> Encode.list) |> Encode.optional input.orderby ), ( "parent", Encode.string |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "password", Encode.string |> Encode.optional input.password ), ( "search", Encode.string |> Encode.optional input.search ), ( "stati", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.stati ), ( "status", Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.optional input.status ), ( "tag", Encode.string |> Encode.optional input.tag ), ( "tagId", Encode.string |> Encode.optional input.tagId ), ( "tagIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagIn ), ( "tagNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagNotIn ), ( "tagSlugAnd", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugAnd ), ( "tagSlugIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugIn ), ( "title", Encode.string |> Encode.optional input.title ) ]


buildRootQueryToPostConnectionWhereArgs : (RootQueryToPostConnectionWhereArgsOptionalFields -> RootQueryToPostConnectionWhereArgsOptionalFields) -> RootQueryToPostConnectionWhereArgs
buildRootQueryToPostConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { author = Absent, authorIn = Absent, authorName = Absent, authorNotIn = Absent, categoryId = Absent, categoryIn = Absent, categoryName = Absent, categoryNotIn = Absent, dateQuery = Absent, hasPassword = Absent, id = Absent, in_ = Absent, mimeType = Absent, name = Absent, nameIn = Absent, notIn = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, password = Absent, search = Absent, stati = Absent, status = Absent, tag = Absent, tagId = Absent, tagIn = Absent, tagNotIn = Absent, tagSlugAnd = Absent, tagSlugIn = Absent, title = Absent }
    in
    { author = optionals.author, authorIn = optionals.authorIn, authorName = optionals.authorName, authorNotIn = optionals.authorNotIn, categoryId = optionals.categoryId, categoryIn = optionals.categoryIn, categoryName = optionals.categoryName, categoryNotIn = optionals.categoryNotIn, dateQuery = optionals.dateQuery, hasPassword = optionals.hasPassword, id = optionals.id, in_ = optionals.in_, mimeType = optionals.mimeType, name = optionals.name, nameIn = optionals.nameIn, notIn = optionals.notIn, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, password = optionals.password, search = optionals.search, stati = optionals.stati, status = optionals.status, tag = optionals.tag, tagId = optionals.tagId, tagIn = optionals.tagIn, tagNotIn = optionals.tagNotIn, tagSlugAnd = optionals.tagSlugAnd, tagSlugIn = optionals.tagSlugIn, title = optionals.title }


type alias RootQueryToPostConnectionWhereArgsOptionalFields =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Type for the RootQueryToPostConnectionWhereArgs input object.
-}
type alias RootQueryToPostConnectionWhereArgs =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Encode a RootQueryToPostConnectionWhereArgs into a value that can be used as an argument.
-}
encodeRootQueryToPostConnectionWhereArgs : RootQueryToPostConnectionWhereArgs -> Value
encodeRootQueryToPostConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "author", Encode.int |> Encode.optional input.author ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorName", Encode.string |> Encode.optional input.authorName ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "categoryId", Encode.int |> Encode.optional input.categoryId ), ( "categoryIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryIn ), ( "categoryName", Encode.string |> Encode.optional input.categoryName ), ( "categoryNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryNotIn ), ( "dateQuery", encodeDateQueryInput |> Encode.optional input.dateQuery ), ( "hasPassword", Encode.bool |> Encode.optional input.hasPassword ), ( "id", Encode.int |> Encode.optional input.id ), ( "in", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.in_ ), ( "mimeType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.mimeType ), ( "name", Encode.string |> Encode.optional input.name ), ( "nameIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.nameIn ), ( "notIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.notIn ), ( "orderby", (encodePostObjectsConnectionOrderbyInput |> Encode.maybe |> Encode.list) |> Encode.optional input.orderby ), ( "parent", Encode.string |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "password", Encode.string |> Encode.optional input.password ), ( "search", Encode.string |> Encode.optional input.search ), ( "stati", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.stati ), ( "status", Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.optional input.status ), ( "tag", Encode.string |> Encode.optional input.tag ), ( "tagId", Encode.string |> Encode.optional input.tagId ), ( "tagIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagIn ), ( "tagNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagNotIn ), ( "tagSlugAnd", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugAnd ), ( "tagSlugIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugIn ), ( "title", Encode.string |> Encode.optional input.title ) ]


buildRootQueryToRevisionConnectionWhereArgs : (RootQueryToRevisionConnectionWhereArgsOptionalFields -> RootQueryToRevisionConnectionWhereArgsOptionalFields) -> RootQueryToRevisionConnectionWhereArgs
buildRootQueryToRevisionConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { author = Absent, authorIn = Absent, authorName = Absent, authorNotIn = Absent, categoryId = Absent, categoryIn = Absent, categoryName = Absent, categoryNotIn = Absent, dateQuery = Absent, hasPassword = Absent, id = Absent, in_ = Absent, mimeType = Absent, name = Absent, nameIn = Absent, notIn = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, password = Absent, search = Absent, stati = Absent, status = Absent, tag = Absent, tagId = Absent, tagIn = Absent, tagNotIn = Absent, tagSlugAnd = Absent, tagSlugIn = Absent, title = Absent }
    in
    { author = optionals.author, authorIn = optionals.authorIn, authorName = optionals.authorName, authorNotIn = optionals.authorNotIn, categoryId = optionals.categoryId, categoryIn = optionals.categoryIn, categoryName = optionals.categoryName, categoryNotIn = optionals.categoryNotIn, dateQuery = optionals.dateQuery, hasPassword = optionals.hasPassword, id = optionals.id, in_ = optionals.in_, mimeType = optionals.mimeType, name = optionals.name, nameIn = optionals.nameIn, notIn = optionals.notIn, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, password = optionals.password, search = optionals.search, stati = optionals.stati, status = optionals.status, tag = optionals.tag, tagId = optionals.tagId, tagIn = optionals.tagIn, tagNotIn = optionals.tagNotIn, tagSlugAnd = optionals.tagSlugAnd, tagSlugIn = optionals.tagSlugIn, title = optionals.title }


type alias RootQueryToRevisionConnectionWhereArgsOptionalFields =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Type for the RootQueryToRevisionConnectionWhereArgs input object.
-}
type alias RootQueryToRevisionConnectionWhereArgs =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Encode a RootQueryToRevisionConnectionWhereArgs into a value that can be used as an argument.
-}
encodeRootQueryToRevisionConnectionWhereArgs : RootQueryToRevisionConnectionWhereArgs -> Value
encodeRootQueryToRevisionConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "author", Encode.int |> Encode.optional input.author ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorName", Encode.string |> Encode.optional input.authorName ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "categoryId", Encode.int |> Encode.optional input.categoryId ), ( "categoryIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryIn ), ( "categoryName", Encode.string |> Encode.optional input.categoryName ), ( "categoryNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryNotIn ), ( "dateQuery", encodeDateQueryInput |> Encode.optional input.dateQuery ), ( "hasPassword", Encode.bool |> Encode.optional input.hasPassword ), ( "id", Encode.int |> Encode.optional input.id ), ( "in", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.in_ ), ( "mimeType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.mimeType ), ( "name", Encode.string |> Encode.optional input.name ), ( "nameIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.nameIn ), ( "notIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.notIn ), ( "orderby", (encodePostObjectsConnectionOrderbyInput |> Encode.maybe |> Encode.list) |> Encode.optional input.orderby ), ( "parent", Encode.string |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "password", Encode.string |> Encode.optional input.password ), ( "search", Encode.string |> Encode.optional input.search ), ( "stati", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.stati ), ( "status", Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.optional input.status ), ( "tag", Encode.string |> Encode.optional input.tag ), ( "tagId", Encode.string |> Encode.optional input.tagId ), ( "tagIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagIn ), ( "tagNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagNotIn ), ( "tagSlugAnd", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugAnd ), ( "tagSlugIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugIn ), ( "title", Encode.string |> Encode.optional input.title ) ]


buildRootQueryToTagConnectionWhereArgs : (RootQueryToTagConnectionWhereArgsOptionalFields -> RootQueryToTagConnectionWhereArgsOptionalFields) -> RootQueryToTagConnectionWhereArgs
buildRootQueryToTagConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { cacheDomain = Absent, childless = Absent, childOf = Absent, descriptionLike = Absent, exclude = Absent, excludeTree = Absent, hideEmpty = Absent, hierarchical = Absent, include = Absent, name = Absent, nameLike = Absent, objectIds = Absent, orderby = Absent, padCounts = Absent, parent = Absent, search = Absent, shouldOnlyIncludeConnectedItems = Absent, shouldOutputInFlatList = Absent, slug = Absent, termTaxonomId = Absent, updateTermMetaCache = Absent }
    in
    { cacheDomain = optionals.cacheDomain, childless = optionals.childless, childOf = optionals.childOf, descriptionLike = optionals.descriptionLike, exclude = optionals.exclude, excludeTree = optionals.excludeTree, hideEmpty = optionals.hideEmpty, hierarchical = optionals.hierarchical, include = optionals.include, name = optionals.name, nameLike = optionals.nameLike, objectIds = optionals.objectIds, orderby = optionals.orderby, padCounts = optionals.padCounts, parent = optionals.parent, search = optionals.search, shouldOnlyIncludeConnectedItems = optionals.shouldOnlyIncludeConnectedItems, shouldOutputInFlatList = optionals.shouldOutputInFlatList, slug = optionals.slug, termTaxonomId = optionals.termTaxonomId, updateTermMetaCache = optionals.updateTermMetaCache }


type alias RootQueryToTagConnectionWhereArgsOptionalFields =
    { cacheDomain : OptionalArgument String
    , childless : OptionalArgument Bool
    , childOf : OptionalArgument Int
    , descriptionLike : OptionalArgument String
    , exclude : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , excludeTree : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , hideEmpty : OptionalArgument Bool
    , hierarchical : OptionalArgument Bool
    , include : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , name : OptionalArgument (List (Maybe String))
    , nameLike : OptionalArgument String
    , objectIds : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument Wordpress.Enum.TermObjectsConnectionOrderbyEnum.TermObjectsConnectionOrderbyEnum
    , padCounts : OptionalArgument Bool
    , parent : OptionalArgument Int
    , search : OptionalArgument String
    , shouldOnlyIncludeConnectedItems : OptionalArgument Bool
    , shouldOutputInFlatList : OptionalArgument Bool
    , slug : OptionalArgument (List (Maybe String))
    , termTaxonomId : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , updateTermMetaCache : OptionalArgument Bool
    }


{-| Type for the RootQueryToTagConnectionWhereArgs input object.
-}
type alias RootQueryToTagConnectionWhereArgs =
    { cacheDomain : OptionalArgument String
    , childless : OptionalArgument Bool
    , childOf : OptionalArgument Int
    , descriptionLike : OptionalArgument String
    , exclude : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , excludeTree : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , hideEmpty : OptionalArgument Bool
    , hierarchical : OptionalArgument Bool
    , include : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , name : OptionalArgument (List (Maybe String))
    , nameLike : OptionalArgument String
    , objectIds : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument Wordpress.Enum.TermObjectsConnectionOrderbyEnum.TermObjectsConnectionOrderbyEnum
    , padCounts : OptionalArgument Bool
    , parent : OptionalArgument Int
    , search : OptionalArgument String
    , shouldOnlyIncludeConnectedItems : OptionalArgument Bool
    , shouldOutputInFlatList : OptionalArgument Bool
    , slug : OptionalArgument (List (Maybe String))
    , termTaxonomId : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , updateTermMetaCache : OptionalArgument Bool
    }


{-| Encode a RootQueryToTagConnectionWhereArgs into a value that can be used as an argument.
-}
encodeRootQueryToTagConnectionWhereArgs : RootQueryToTagConnectionWhereArgs -> Value
encodeRootQueryToTagConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "cacheDomain", Encode.string |> Encode.optional input.cacheDomain ), ( "childless", Encode.bool |> Encode.optional input.childless ), ( "childOf", Encode.int |> Encode.optional input.childOf ), ( "descriptionLike", Encode.string |> Encode.optional input.descriptionLike ), ( "exclude", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.exclude ), ( "excludeTree", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.excludeTree ), ( "hideEmpty", Encode.bool |> Encode.optional input.hideEmpty ), ( "hierarchical", Encode.bool |> Encode.optional input.hierarchical ), ( "include", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.include ), ( "name", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.name ), ( "nameLike", Encode.string |> Encode.optional input.nameLike ), ( "objectIds", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.objectIds ), ( "orderby", Encode.enum Wordpress.Enum.TermObjectsConnectionOrderbyEnum.toString |> Encode.optional input.orderby ), ( "padCounts", Encode.bool |> Encode.optional input.padCounts ), ( "parent", Encode.int |> Encode.optional input.parent ), ( "search", Encode.string |> Encode.optional input.search ), ( "shouldOnlyIncludeConnectedItems", Encode.bool |> Encode.optional input.shouldOnlyIncludeConnectedItems ), ( "shouldOutputInFlatList", Encode.bool |> Encode.optional input.shouldOutputInFlatList ), ( "slug", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.slug ), ( "termTaxonomId", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.termTaxonomId ), ( "updateTermMetaCache", Encode.bool |> Encode.optional input.updateTermMetaCache ) ]


buildRootQueryToUserConnectionWhereArgs : (RootQueryToUserConnectionWhereArgsOptionalFields -> RootQueryToUserConnectionWhereArgsOptionalFields) -> RootQueryToUserConnectionWhereArgs
buildRootQueryToUserConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { exclude = Absent, hasPublishedPosts = Absent, include = Absent, login = Absent, loginIn = Absent, loginNotIn = Absent, nicename = Absent, nicenameIn = Absent, nicenameNotIn = Absent, role = Absent, roleIn = Absent, roleNotIn = Absent, search = Absent, searchColumns = Absent }
    in
    { exclude = optionals.exclude, hasPublishedPosts = optionals.hasPublishedPosts, include = optionals.include, login = optionals.login, loginIn = optionals.loginIn, loginNotIn = optionals.loginNotIn, nicename = optionals.nicename, nicenameIn = optionals.nicenameIn, nicenameNotIn = optionals.nicenameNotIn, role = optionals.role, roleIn = optionals.roleIn, roleNotIn = optionals.roleNotIn, search = optionals.search, searchColumns = optionals.searchColumns }


type alias RootQueryToUserConnectionWhereArgsOptionalFields =
    { exclude : OptionalArgument (List (Maybe Int))
    , hasPublishedPosts : OptionalArgument (List (Maybe Wordpress.Enum.PostTypeEnum.PostTypeEnum))
    , include : OptionalArgument (List (Maybe Int))
    , login : OptionalArgument String
    , loginIn : OptionalArgument Int
    , loginNotIn : OptionalArgument Int
    , nicename : OptionalArgument String
    , nicenameIn : OptionalArgument (List (Maybe String))
    , nicenameNotIn : OptionalArgument (List (Maybe String))
    , role : OptionalArgument Wordpress.Enum.UserRoleEnum.UserRoleEnum
    , roleIn : OptionalArgument (List (Maybe Wordpress.Enum.UserRoleEnum.UserRoleEnum))
    , roleNotIn : OptionalArgument (List (Maybe Wordpress.Enum.UserRoleEnum.UserRoleEnum))
    , search : OptionalArgument String
    , searchColumns : OptionalArgument (List (Maybe Wordpress.Enum.UsersConnectionSearchColumnEnum.UsersConnectionSearchColumnEnum))
    }


{-| Type for the RootQueryToUserConnectionWhereArgs input object.
-}
type alias RootQueryToUserConnectionWhereArgs =
    { exclude : OptionalArgument (List (Maybe Int))
    , hasPublishedPosts : OptionalArgument (List (Maybe Wordpress.Enum.PostTypeEnum.PostTypeEnum))
    , include : OptionalArgument (List (Maybe Int))
    , login : OptionalArgument String
    , loginIn : OptionalArgument Int
    , loginNotIn : OptionalArgument Int
    , nicename : OptionalArgument String
    , nicenameIn : OptionalArgument (List (Maybe String))
    , nicenameNotIn : OptionalArgument (List (Maybe String))
    , role : OptionalArgument Wordpress.Enum.UserRoleEnum.UserRoleEnum
    , roleIn : OptionalArgument (List (Maybe Wordpress.Enum.UserRoleEnum.UserRoleEnum))
    , roleNotIn : OptionalArgument (List (Maybe Wordpress.Enum.UserRoleEnum.UserRoleEnum))
    , search : OptionalArgument String
    , searchColumns : OptionalArgument (List (Maybe Wordpress.Enum.UsersConnectionSearchColumnEnum.UsersConnectionSearchColumnEnum))
    }


{-| Encode a RootQueryToUserConnectionWhereArgs into a value that can be used as an argument.
-}
encodeRootQueryToUserConnectionWhereArgs : RootQueryToUserConnectionWhereArgs -> Value
encodeRootQueryToUserConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "exclude", (Encode.int |> Encode.maybe |> Encode.list) |> Encode.optional input.exclude ), ( "hasPublishedPosts", (Encode.enum Wordpress.Enum.PostTypeEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.hasPublishedPosts ), ( "include", (Encode.int |> Encode.maybe |> Encode.list) |> Encode.optional input.include ), ( "login", Encode.string |> Encode.optional input.login ), ( "loginIn", Encode.int |> Encode.optional input.loginIn ), ( "loginNotIn", Encode.int |> Encode.optional input.loginNotIn ), ( "nicename", Encode.string |> Encode.optional input.nicename ), ( "nicenameIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.nicenameIn ), ( "nicenameNotIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.nicenameNotIn ), ( "role", Encode.enum Wordpress.Enum.UserRoleEnum.toString |> Encode.optional input.role ), ( "roleIn", (Encode.enum Wordpress.Enum.UserRoleEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.roleIn ), ( "roleNotIn", (Encode.enum Wordpress.Enum.UserRoleEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.roleNotIn ), ( "search", Encode.string |> Encode.optional input.search ), ( "searchColumns", (Encode.enum Wordpress.Enum.UsersConnectionSearchColumnEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.searchColumns ) ]


buildSendPasswordResetEmailInput : SendPasswordResetEmailInputRequiredFields -> SendPasswordResetEmailInput
buildSendPasswordResetEmailInput required =
    { clientMutationId = required.clientMutationId, username = required.username }


type alias SendPasswordResetEmailInputRequiredFields =
    { clientMutationId : String
    , username : String
    }


{-| Type for the SendPasswordResetEmailInput input object.
-}
type alias SendPasswordResetEmailInput =
    { clientMutationId : String
    , username : String
    }


{-| Encode a SendPasswordResetEmailInput into a value that can be used as an argument.
-}
encodeSendPasswordResetEmailInput : SendPasswordResetEmailInput -> Value
encodeSendPasswordResetEmailInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "username", Encode.string input.username |> Just ) ]


buildTagToPostConnectionWhereArgs : (TagToPostConnectionWhereArgsOptionalFields -> TagToPostConnectionWhereArgsOptionalFields) -> TagToPostConnectionWhereArgs
buildTagToPostConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { author = Absent, authorIn = Absent, authorName = Absent, authorNotIn = Absent, categoryId = Absent, categoryIn = Absent, categoryName = Absent, categoryNotIn = Absent, dateQuery = Absent, hasPassword = Absent, id = Absent, in_ = Absent, mimeType = Absent, name = Absent, nameIn = Absent, notIn = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, password = Absent, search = Absent, stati = Absent, status = Absent, tag = Absent, tagId = Absent, tagIn = Absent, tagNotIn = Absent, tagSlugAnd = Absent, tagSlugIn = Absent, title = Absent }
    in
    { author = optionals.author, authorIn = optionals.authorIn, authorName = optionals.authorName, authorNotIn = optionals.authorNotIn, categoryId = optionals.categoryId, categoryIn = optionals.categoryIn, categoryName = optionals.categoryName, categoryNotIn = optionals.categoryNotIn, dateQuery = optionals.dateQuery, hasPassword = optionals.hasPassword, id = optionals.id, in_ = optionals.in_, mimeType = optionals.mimeType, name = optionals.name, nameIn = optionals.nameIn, notIn = optionals.notIn, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, password = optionals.password, search = optionals.search, stati = optionals.stati, status = optionals.status, tag = optionals.tag, tagId = optionals.tagId, tagIn = optionals.tagIn, tagNotIn = optionals.tagNotIn, tagSlugAnd = optionals.tagSlugAnd, tagSlugIn = optionals.tagSlugIn, title = optionals.title }


type alias TagToPostConnectionWhereArgsOptionalFields =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Type for the TagToPostConnectionWhereArgs input object.
-}
type alias TagToPostConnectionWhereArgs =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Encode a TagToPostConnectionWhereArgs into a value that can be used as an argument.
-}
encodeTagToPostConnectionWhereArgs : TagToPostConnectionWhereArgs -> Value
encodeTagToPostConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "author", Encode.int |> Encode.optional input.author ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorName", Encode.string |> Encode.optional input.authorName ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "categoryId", Encode.int |> Encode.optional input.categoryId ), ( "categoryIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryIn ), ( "categoryName", Encode.string |> Encode.optional input.categoryName ), ( "categoryNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryNotIn ), ( "dateQuery", encodeDateQueryInput |> Encode.optional input.dateQuery ), ( "hasPassword", Encode.bool |> Encode.optional input.hasPassword ), ( "id", Encode.int |> Encode.optional input.id ), ( "in", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.in_ ), ( "mimeType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.mimeType ), ( "name", Encode.string |> Encode.optional input.name ), ( "nameIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.nameIn ), ( "notIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.notIn ), ( "orderby", (encodePostObjectsConnectionOrderbyInput |> Encode.maybe |> Encode.list) |> Encode.optional input.orderby ), ( "parent", Encode.string |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "password", Encode.string |> Encode.optional input.password ), ( "search", Encode.string |> Encode.optional input.search ), ( "stati", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.stati ), ( "status", Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.optional input.status ), ( "tag", Encode.string |> Encode.optional input.tag ), ( "tagId", Encode.string |> Encode.optional input.tagId ), ( "tagIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagIn ), ( "tagNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagNotIn ), ( "tagSlugAnd", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugAnd ), ( "tagSlugIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugIn ), ( "title", Encode.string |> Encode.optional input.title ) ]


buildUpdateCategoryInput : UpdateCategoryInputRequiredFields -> (UpdateCategoryInputOptionalFields -> UpdateCategoryInputOptionalFields) -> UpdateCategoryInput
buildUpdateCategoryInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { aliasOf = Absent, description = Absent, name = Absent, parentId = Absent, slug = Absent }
    in
    { aliasOf = optionals.aliasOf, clientMutationId = required.clientMutationId, description = optionals.description, id = required.id, name = optionals.name, parentId = optionals.parentId, slug = optionals.slug }


type alias UpdateCategoryInputRequiredFields =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


type alias UpdateCategoryInputOptionalFields =
    { aliasOf : OptionalArgument String
    , description : OptionalArgument String
    , name : OptionalArgument String
    , parentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , slug : OptionalArgument String
    }


{-| Type for the UpdateCategoryInput input object.
-}
type alias UpdateCategoryInput =
    { aliasOf : OptionalArgument String
    , clientMutationId : String
    , description : OptionalArgument String
    , id : Wordpress.ScalarCodecs.Id
    , name : OptionalArgument String
    , parentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , slug : OptionalArgument String
    }


{-| Encode a UpdateCategoryInput into a value that can be used as an argument.
-}
encodeUpdateCategoryInput : UpdateCategoryInput -> Value
encodeUpdateCategoryInput input =
    Encode.maybeObject
        [ ( "aliasOf", Encode.string |> Encode.optional input.aliasOf ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "name", Encode.string |> Encode.optional input.name ), ( "parentId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.parentId ), ( "slug", Encode.string |> Encode.optional input.slug ) ]


buildUpdateCommentInput : UpdateCommentInputRequiredFields -> (UpdateCommentInputOptionalFields -> UpdateCommentInputOptionalFields) -> UpdateCommentInput
buildUpdateCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { agent = Absent, approved = Absent, author = Absent, authorEmail = Absent, authorIp = Absent, authorUrl = Absent, content = Absent, date = Absent, parent = Absent, postId = Absent, type_ = Absent, userId = Absent }
    in
    { agent = optionals.agent, approved = optionals.approved, author = optionals.author, authorEmail = optionals.authorEmail, authorIp = optionals.authorIp, authorUrl = optionals.authorUrl, clientMutationId = required.clientMutationId, content = optionals.content, date = optionals.date, id = required.id, parent = optionals.parent, postId = optionals.postId, type_ = optionals.type_, userId = optionals.userId }


type alias UpdateCommentInputRequiredFields =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


type alias UpdateCommentInputOptionalFields =
    { agent : OptionalArgument String
    , approved : OptionalArgument String
    , author : OptionalArgument String
    , authorEmail : OptionalArgument String
    , authorIp : OptionalArgument String
    , authorUrl : OptionalArgument String
    , content : OptionalArgument String
    , date : OptionalArgument String
    , parent : OptionalArgument Wordpress.ScalarCodecs.Id
    , postId : OptionalArgument Int
    , type_ : OptionalArgument String
    , userId : OptionalArgument Int
    }


{-| Type for the UpdateCommentInput input object.
-}
type alias UpdateCommentInput =
    { agent : OptionalArgument String
    , approved : OptionalArgument String
    , author : OptionalArgument String
    , authorEmail : OptionalArgument String
    , authorIp : OptionalArgument String
    , authorUrl : OptionalArgument String
    , clientMutationId : String
    , content : OptionalArgument String
    , date : OptionalArgument String
    , id : Wordpress.ScalarCodecs.Id
    , parent : OptionalArgument Wordpress.ScalarCodecs.Id
    , postId : OptionalArgument Int
    , type_ : OptionalArgument String
    , userId : OptionalArgument Int
    }


{-| Encode a UpdateCommentInput into a value that can be used as an argument.
-}
encodeUpdateCommentInput : UpdateCommentInput -> Value
encodeUpdateCommentInput input =
    Encode.maybeObject
        [ ( "agent", Encode.string |> Encode.optional input.agent ), ( "approved", Encode.string |> Encode.optional input.approved ), ( "author", Encode.string |> Encode.optional input.author ), ( "authorEmail", Encode.string |> Encode.optional input.authorEmail ), ( "authorIp", Encode.string |> Encode.optional input.authorIp ), ( "authorUrl", Encode.string |> Encode.optional input.authorUrl ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "content", Encode.string |> Encode.optional input.content ), ( "date", Encode.string |> Encode.optional input.date ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "parent", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.parent ), ( "postId", Encode.int |> Encode.optional input.postId ), ( "type", Encode.string |> Encode.optional input.type_ ), ( "userId", Encode.int |> Encode.optional input.userId ) ]


buildUpdateMediaItemInput : UpdateMediaItemInputRequiredFields -> (UpdateMediaItemInputOptionalFields -> UpdateMediaItemInputOptionalFields) -> UpdateMediaItemInput
buildUpdateMediaItemInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { altText = Absent, authorId = Absent, caption = Absent, commentStatus = Absent, date = Absent, dateGmt = Absent, description = Absent, filePath = Absent, fileType = Absent, parentId = Absent, pingStatus = Absent, slug = Absent, status = Absent, title = Absent }
    in
    { altText = optionals.altText, authorId = optionals.authorId, caption = optionals.caption, clientMutationId = required.clientMutationId, commentStatus = optionals.commentStatus, date = optionals.date, dateGmt = optionals.dateGmt, description = optionals.description, filePath = optionals.filePath, fileType = optionals.fileType, id = required.id, parentId = optionals.parentId, pingStatus = optionals.pingStatus, slug = optionals.slug, status = optionals.status, title = optionals.title }


type alias UpdateMediaItemInputRequiredFields =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


type alias UpdateMediaItemInputOptionalFields =
    { altText : OptionalArgument String
    , authorId : OptionalArgument Wordpress.ScalarCodecs.Id
    , caption : OptionalArgument String
    , commentStatus : OptionalArgument String
    , date : OptionalArgument String
    , dateGmt : OptionalArgument String
    , description : OptionalArgument String
    , filePath : OptionalArgument String
    , fileType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , parentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , pingStatus : OptionalArgument String
    , slug : OptionalArgument String
    , status : OptionalArgument Wordpress.Enum.MediaItemStatusEnum.MediaItemStatusEnum
    , title : OptionalArgument String
    }


{-| Type for the UpdateMediaItemInput input object.
-}
type alias UpdateMediaItemInput =
    { altText : OptionalArgument String
    , authorId : OptionalArgument Wordpress.ScalarCodecs.Id
    , caption : OptionalArgument String
    , clientMutationId : String
    , commentStatus : OptionalArgument String
    , date : OptionalArgument String
    , dateGmt : OptionalArgument String
    , description : OptionalArgument String
    , filePath : OptionalArgument String
    , fileType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , id : Wordpress.ScalarCodecs.Id
    , parentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , pingStatus : OptionalArgument String
    , slug : OptionalArgument String
    , status : OptionalArgument Wordpress.Enum.MediaItemStatusEnum.MediaItemStatusEnum
    , title : OptionalArgument String
    }


{-| Encode a UpdateMediaItemInput into a value that can be used as an argument.
-}
encodeUpdateMediaItemInput : UpdateMediaItemInput -> Value
encodeUpdateMediaItemInput input =
    Encode.maybeObject
        [ ( "altText", Encode.string |> Encode.optional input.altText ), ( "authorId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.authorId ), ( "caption", Encode.string |> Encode.optional input.caption ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "commentStatus", Encode.string |> Encode.optional input.commentStatus ), ( "date", Encode.string |> Encode.optional input.date ), ( "dateGmt", Encode.string |> Encode.optional input.dateGmt ), ( "description", Encode.string |> Encode.optional input.description ), ( "filePath", Encode.string |> Encode.optional input.filePath ), ( "fileType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.fileType ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "parentId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.parentId ), ( "pingStatus", Encode.string |> Encode.optional input.pingStatus ), ( "slug", Encode.string |> Encode.optional input.slug ), ( "status", Encode.enum Wordpress.Enum.MediaItemStatusEnum.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ) ]


buildUpdatePageInput : UpdatePageInputRequiredFields -> (UpdatePageInputOptionalFields -> UpdatePageInputOptionalFields) -> UpdatePageInput
buildUpdatePageInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { authorId = Absent, commentCount = Absent, commentStatus = Absent, content = Absent, date = Absent, excerpt = Absent, menuOrder = Absent, mimeType = Absent, parentId = Absent, password = Absent, pinged = Absent, pingStatus = Absent, slug = Absent, status = Absent, title = Absent, toPing = Absent }
    in
    { authorId = optionals.authorId, clientMutationId = required.clientMutationId, commentCount = optionals.commentCount, commentStatus = optionals.commentStatus, content = optionals.content, date = optionals.date, excerpt = optionals.excerpt, id = required.id, menuOrder = optionals.menuOrder, mimeType = optionals.mimeType, parentId = optionals.parentId, password = optionals.password, pinged = optionals.pinged, pingStatus = optionals.pingStatus, slug = optionals.slug, status = optionals.status, title = optionals.title, toPing = optionals.toPing }


type alias UpdatePageInputRequiredFields =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


type alias UpdatePageInputOptionalFields =
    { authorId : OptionalArgument Wordpress.ScalarCodecs.Id
    , commentCount : OptionalArgument Int
    , commentStatus : OptionalArgument String
    , content : OptionalArgument String
    , date : OptionalArgument String
    , excerpt : OptionalArgument String
    , menuOrder : OptionalArgument Int
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , parentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , password : OptionalArgument String
    , pinged : OptionalArgument (List (Maybe String))
    , pingStatus : OptionalArgument String
    , slug : OptionalArgument String
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , title : OptionalArgument String
    , toPing : OptionalArgument (List (Maybe String))
    }


{-| Type for the UpdatePageInput input object.
-}
type alias UpdatePageInput =
    { authorId : OptionalArgument Wordpress.ScalarCodecs.Id
    , clientMutationId : String
    , commentCount : OptionalArgument Int
    , commentStatus : OptionalArgument String
    , content : OptionalArgument String
    , date : OptionalArgument String
    , excerpt : OptionalArgument String
    , id : Wordpress.ScalarCodecs.Id
    , menuOrder : OptionalArgument Int
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , parentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , password : OptionalArgument String
    , pinged : OptionalArgument (List (Maybe String))
    , pingStatus : OptionalArgument String
    , slug : OptionalArgument String
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , title : OptionalArgument String
    , toPing : OptionalArgument (List (Maybe String))
    }


{-| Encode a UpdatePageInput into a value that can be used as an argument.
-}
encodeUpdatePageInput : UpdatePageInput -> Value
encodeUpdatePageInput input =
    Encode.maybeObject
        [ ( "authorId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.authorId ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "commentCount", Encode.int |> Encode.optional input.commentCount ), ( "commentStatus", Encode.string |> Encode.optional input.commentStatus ), ( "content", Encode.string |> Encode.optional input.content ), ( "date", Encode.string |> Encode.optional input.date ), ( "excerpt", Encode.string |> Encode.optional input.excerpt ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "menuOrder", Encode.int |> Encode.optional input.menuOrder ), ( "mimeType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.mimeType ), ( "parentId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.parentId ), ( "password", Encode.string |> Encode.optional input.password ), ( "pinged", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.pinged ), ( "pingStatus", Encode.string |> Encode.optional input.pingStatus ), ( "slug", Encode.string |> Encode.optional input.slug ), ( "status", Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "toPing", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.toPing ) ]


buildUpdatePostInput : UpdatePostInputRequiredFields -> (UpdatePostInputOptionalFields -> UpdatePostInputOptionalFields) -> UpdatePostInput
buildUpdatePostInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { authorId = Absent, categories = Absent, commentCount = Absent, commentStatus = Absent, content = Absent, date = Absent, excerpt = Absent, menuOrder = Absent, mimeType = Absent, parentId = Absent, password = Absent, pinged = Absent, pingStatus = Absent, slug = Absent, status = Absent, tags = Absent, title = Absent, toPing = Absent }
    in
    UpdatePostInput { authorId = optionals.authorId, categories = optionals.categories, clientMutationId = required.clientMutationId, commentCount = optionals.commentCount, commentStatus = optionals.commentStatus, content = optionals.content, date = optionals.date, excerpt = optionals.excerpt, id = required.id, menuOrder = optionals.menuOrder, mimeType = optionals.mimeType, parentId = optionals.parentId, password = optionals.password, pinged = optionals.pinged, pingStatus = optionals.pingStatus, slug = optionals.slug, status = optionals.status, tags = optionals.tags, title = optionals.title, toPing = optionals.toPing }


type alias UpdatePostInputRequiredFields =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


type alias UpdatePostInputOptionalFields =
    { authorId : OptionalArgument Wordpress.ScalarCodecs.Id
    , categories : OptionalArgument PostCategoriesInput
    , commentCount : OptionalArgument Int
    , commentStatus : OptionalArgument String
    , content : OptionalArgument String
    , date : OptionalArgument String
    , excerpt : OptionalArgument String
    , menuOrder : OptionalArgument Int
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , parentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , password : OptionalArgument String
    , pinged : OptionalArgument (List (Maybe String))
    , pingStatus : OptionalArgument String
    , slug : OptionalArgument String
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tags : OptionalArgument PostTagsInput
    , title : OptionalArgument String
    , toPing : OptionalArgument (List (Maybe String))
    }


{-| Type alias for the `UpdatePostInput` attributes. Note that this type
needs to use the `UpdatePostInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias UpdatePostInputRaw =
    { authorId : OptionalArgument Wordpress.ScalarCodecs.Id
    , categories : OptionalArgument PostCategoriesInput
    , clientMutationId : String
    , commentCount : OptionalArgument Int
    , commentStatus : OptionalArgument String
    , content : OptionalArgument String
    , date : OptionalArgument String
    , excerpt : OptionalArgument String
    , id : Wordpress.ScalarCodecs.Id
    , menuOrder : OptionalArgument Int
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , parentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , password : OptionalArgument String
    , pinged : OptionalArgument (List (Maybe String))
    , pingStatus : OptionalArgument String
    , slug : OptionalArgument String
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tags : OptionalArgument PostTagsInput
    , title : OptionalArgument String
    , toPing : OptionalArgument (List (Maybe String))
    }


{-| Type for the UpdatePostInput input object.
-}
type UpdatePostInput
    = UpdatePostInput UpdatePostInputRaw


{-| Encode a UpdatePostInput into a value that can be used as an argument.
-}
encodeUpdatePostInput : UpdatePostInput -> Value
encodeUpdatePostInput (UpdatePostInput input) =
    Encode.maybeObject
        [ ( "authorId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.authorId ), ( "categories", encodePostCategoriesInput |> Encode.optional input.categories ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "commentCount", Encode.int |> Encode.optional input.commentCount ), ( "commentStatus", Encode.string |> Encode.optional input.commentStatus ), ( "content", Encode.string |> Encode.optional input.content ), ( "date", Encode.string |> Encode.optional input.date ), ( "excerpt", Encode.string |> Encode.optional input.excerpt ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "menuOrder", Encode.int |> Encode.optional input.menuOrder ), ( "mimeType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.mimeType ), ( "parentId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.parentId ), ( "password", Encode.string |> Encode.optional input.password ), ( "pinged", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.pinged ), ( "pingStatus", Encode.string |> Encode.optional input.pingStatus ), ( "slug", Encode.string |> Encode.optional input.slug ), ( "status", Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.optional input.status ), ( "tags", encodePostTagsInput |> Encode.optional input.tags ), ( "title", Encode.string |> Encode.optional input.title ), ( "toPing", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.toPing ) ]


buildUpdateSettingsInput : UpdateSettingsInputRequiredFields -> (UpdateSettingsInputOptionalFields -> UpdateSettingsInputOptionalFields) -> UpdateSettingsInput
buildUpdateSettingsInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { discussionSettingsDefaultCommentStatus = Absent, discussionSettingsDefaultPingStatus = Absent, generalSettingsDateFormat = Absent, generalSettingsDescription = Absent, generalSettingsEmail = Absent, generalSettingsLanguage = Absent, generalSettingsStartOfWeek = Absent, generalSettingsTimeFormat = Absent, generalSettingsTimezone = Absent, generalSettingsTitle = Absent, generalSettingsUrl = Absent, readingSettingsPostsPerPage = Absent, writingSettingsDefaultCategory = Absent, writingSettingsDefaultPostFormat = Absent, writingSettingsUseSmilies = Absent }
    in
    { clientMutationId = required.clientMutationId, discussionSettingsDefaultCommentStatus = optionals.discussionSettingsDefaultCommentStatus, discussionSettingsDefaultPingStatus = optionals.discussionSettingsDefaultPingStatus, generalSettingsDateFormat = optionals.generalSettingsDateFormat, generalSettingsDescription = optionals.generalSettingsDescription, generalSettingsEmail = optionals.generalSettingsEmail, generalSettingsLanguage = optionals.generalSettingsLanguage, generalSettingsStartOfWeek = optionals.generalSettingsStartOfWeek, generalSettingsTimeFormat = optionals.generalSettingsTimeFormat, generalSettingsTimezone = optionals.generalSettingsTimezone, generalSettingsTitle = optionals.generalSettingsTitle, generalSettingsUrl = optionals.generalSettingsUrl, readingSettingsPostsPerPage = optionals.readingSettingsPostsPerPage, writingSettingsDefaultCategory = optionals.writingSettingsDefaultCategory, writingSettingsDefaultPostFormat = optionals.writingSettingsDefaultPostFormat, writingSettingsUseSmilies = optionals.writingSettingsUseSmilies }


type alias UpdateSettingsInputRequiredFields =
    { clientMutationId : String }


type alias UpdateSettingsInputOptionalFields =
    { discussionSettingsDefaultCommentStatus : OptionalArgument String
    , discussionSettingsDefaultPingStatus : OptionalArgument String
    , generalSettingsDateFormat : OptionalArgument String
    , generalSettingsDescription : OptionalArgument String
    , generalSettingsEmail : OptionalArgument String
    , generalSettingsLanguage : OptionalArgument String
    , generalSettingsStartOfWeek : OptionalArgument Int
    , generalSettingsTimeFormat : OptionalArgument String
    , generalSettingsTimezone : OptionalArgument String
    , generalSettingsTitle : OptionalArgument String
    , generalSettingsUrl : OptionalArgument String
    , readingSettingsPostsPerPage : OptionalArgument Int
    , writingSettingsDefaultCategory : OptionalArgument Int
    , writingSettingsDefaultPostFormat : OptionalArgument String
    , writingSettingsUseSmilies : OptionalArgument Bool
    }


{-| Type for the UpdateSettingsInput input object.
-}
type alias UpdateSettingsInput =
    { clientMutationId : String
    , discussionSettingsDefaultCommentStatus : OptionalArgument String
    , discussionSettingsDefaultPingStatus : OptionalArgument String
    , generalSettingsDateFormat : OptionalArgument String
    , generalSettingsDescription : OptionalArgument String
    , generalSettingsEmail : OptionalArgument String
    , generalSettingsLanguage : OptionalArgument String
    , generalSettingsStartOfWeek : OptionalArgument Int
    , generalSettingsTimeFormat : OptionalArgument String
    , generalSettingsTimezone : OptionalArgument String
    , generalSettingsTitle : OptionalArgument String
    , generalSettingsUrl : OptionalArgument String
    , readingSettingsPostsPerPage : OptionalArgument Int
    , writingSettingsDefaultCategory : OptionalArgument Int
    , writingSettingsDefaultPostFormat : OptionalArgument String
    , writingSettingsUseSmilies : OptionalArgument Bool
    }


{-| Encode a UpdateSettingsInput into a value that can be used as an argument.
-}
encodeUpdateSettingsInput : UpdateSettingsInput -> Value
encodeUpdateSettingsInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "discussionSettingsDefaultCommentStatus", Encode.string |> Encode.optional input.discussionSettingsDefaultCommentStatus ), ( "discussionSettingsDefaultPingStatus", Encode.string |> Encode.optional input.discussionSettingsDefaultPingStatus ), ( "generalSettingsDateFormat", Encode.string |> Encode.optional input.generalSettingsDateFormat ), ( "generalSettingsDescription", Encode.string |> Encode.optional input.generalSettingsDescription ), ( "generalSettingsEmail", Encode.string |> Encode.optional input.generalSettingsEmail ), ( "generalSettingsLanguage", Encode.string |> Encode.optional input.generalSettingsLanguage ), ( "generalSettingsStartOfWeek", Encode.int |> Encode.optional input.generalSettingsStartOfWeek ), ( "generalSettingsTimeFormat", Encode.string |> Encode.optional input.generalSettingsTimeFormat ), ( "generalSettingsTimezone", Encode.string |> Encode.optional input.generalSettingsTimezone ), ( "generalSettingsTitle", Encode.string |> Encode.optional input.generalSettingsTitle ), ( "generalSettingsUrl", Encode.string |> Encode.optional input.generalSettingsUrl ), ( "readingSettingsPostsPerPage", Encode.int |> Encode.optional input.readingSettingsPostsPerPage ), ( "writingSettingsDefaultCategory", Encode.int |> Encode.optional input.writingSettingsDefaultCategory ), ( "writingSettingsDefaultPostFormat", Encode.string |> Encode.optional input.writingSettingsDefaultPostFormat ), ( "writingSettingsUseSmilies", Encode.bool |> Encode.optional input.writingSettingsUseSmilies ) ]


buildUpdateTagInput : UpdateTagInputRequiredFields -> (UpdateTagInputOptionalFields -> UpdateTagInputOptionalFields) -> UpdateTagInput
buildUpdateTagInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { aliasOf = Absent, description = Absent, name = Absent, slug = Absent }
    in
    { aliasOf = optionals.aliasOf, clientMutationId = required.clientMutationId, description = optionals.description, id = required.id, name = optionals.name, slug = optionals.slug }


type alias UpdateTagInputRequiredFields =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


type alias UpdateTagInputOptionalFields =
    { aliasOf : OptionalArgument String
    , description : OptionalArgument String
    , name : OptionalArgument String
    , slug : OptionalArgument String
    }


{-| Type for the UpdateTagInput input object.
-}
type alias UpdateTagInput =
    { aliasOf : OptionalArgument String
    , clientMutationId : String
    , description : OptionalArgument String
    , id : Wordpress.ScalarCodecs.Id
    , name : OptionalArgument String
    , slug : OptionalArgument String
    }


{-| Encode a UpdateTagInput into a value that can be used as an argument.
-}
encodeUpdateTagInput : UpdateTagInput -> Value
encodeUpdateTagInput input =
    Encode.maybeObject
        [ ( "aliasOf", Encode.string |> Encode.optional input.aliasOf ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "name", Encode.string |> Encode.optional input.name ), ( "slug", Encode.string |> Encode.optional input.slug ) ]


buildUpdateUserInput : UpdateUserInputRequiredFields -> (UpdateUserInputOptionalFields -> UpdateUserInputOptionalFields) -> UpdateUserInput
buildUpdateUserInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { aim = Absent, description = Absent, displayName = Absent, email = Absent, firstName = Absent, jabber = Absent, lastName = Absent, locale = Absent, nicename = Absent, nickname = Absent, password = Absent, registered = Absent, richEditing = Absent, roles = Absent, websiteUrl = Absent, yim = Absent }
    in
    { aim = optionals.aim, clientMutationId = required.clientMutationId, description = optionals.description, displayName = optionals.displayName, email = optionals.email, firstName = optionals.firstName, id = required.id, jabber = optionals.jabber, lastName = optionals.lastName, locale = optionals.locale, nicename = optionals.nicename, nickname = optionals.nickname, password = optionals.password, registered = optionals.registered, richEditing = optionals.richEditing, roles = optionals.roles, websiteUrl = optionals.websiteUrl, yim = optionals.yim }


type alias UpdateUserInputRequiredFields =
    { clientMutationId : String
    , id : Wordpress.ScalarCodecs.Id
    }


type alias UpdateUserInputOptionalFields =
    { aim : OptionalArgument String
    , description : OptionalArgument String
    , displayName : OptionalArgument String
    , email : OptionalArgument String
    , firstName : OptionalArgument String
    , jabber : OptionalArgument String
    , lastName : OptionalArgument String
    , locale : OptionalArgument String
    , nicename : OptionalArgument String
    , nickname : OptionalArgument String
    , password : OptionalArgument String
    , registered : OptionalArgument String
    , richEditing : OptionalArgument String
    , roles : OptionalArgument (List (Maybe String))
    , websiteUrl : OptionalArgument String
    , yim : OptionalArgument String
    }


{-| Type for the UpdateUserInput input object.
-}
type alias UpdateUserInput =
    { aim : OptionalArgument String
    , clientMutationId : String
    , description : OptionalArgument String
    , displayName : OptionalArgument String
    , email : OptionalArgument String
    , firstName : OptionalArgument String
    , id : Wordpress.ScalarCodecs.Id
    , jabber : OptionalArgument String
    , lastName : OptionalArgument String
    , locale : OptionalArgument String
    , nicename : OptionalArgument String
    , nickname : OptionalArgument String
    , password : OptionalArgument String
    , registered : OptionalArgument String
    , richEditing : OptionalArgument String
    , roles : OptionalArgument (List (Maybe String))
    , websiteUrl : OptionalArgument String
    , yim : OptionalArgument String
    }


{-| Encode a UpdateUserInput into a value that can be used as an argument.
-}
encodeUpdateUserInput : UpdateUserInput -> Value
encodeUpdateUserInput input =
    Encode.maybeObject
        [ ( "aim", Encode.string |> Encode.optional input.aim ), ( "clientMutationId", Encode.string input.clientMutationId |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "displayName", Encode.string |> Encode.optional input.displayName ), ( "email", Encode.string |> Encode.optional input.email ), ( "firstName", Encode.string |> Encode.optional input.firstName ), ( "id", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "jabber", Encode.string |> Encode.optional input.jabber ), ( "lastName", Encode.string |> Encode.optional input.lastName ), ( "locale", Encode.string |> Encode.optional input.locale ), ( "nicename", Encode.string |> Encode.optional input.nicename ), ( "nickname", Encode.string |> Encode.optional input.nickname ), ( "password", Encode.string |> Encode.optional input.password ), ( "registered", Encode.string |> Encode.optional input.registered ), ( "richEditing", Encode.string |> Encode.optional input.richEditing ), ( "roles", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.roles ), ( "websiteUrl", Encode.string |> Encode.optional input.websiteUrl ), ( "yim", Encode.string |> Encode.optional input.yim ) ]


buildUserToCommentConnectionWhereArgs : (UserToCommentConnectionWhereArgsOptionalFields -> UserToCommentConnectionWhereArgsOptionalFields) -> UserToCommentConnectionWhereArgs
buildUserToCommentConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { authorEmail = Absent, authorIn = Absent, authorNotIn = Absent, authorUrl = Absent, commentIn = Absent, commentNotIn = Absent, commentType = Absent, commentTypeIn = Absent, commentTypeNotIn = Absent, contentAuthor = Absent, contentAuthorIn = Absent, contentAuthorNotIn = Absent, contentId = Absent, contentIdIn = Absent, contentIdNotIn = Absent, contentName = Absent, contentParent = Absent, contentStatus = Absent, contentType = Absent, includeUnapproved = Absent, karma = Absent, order = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, search = Absent, status = Absent, userId = Absent }
    in
    { authorEmail = optionals.authorEmail, authorIn = optionals.authorIn, authorNotIn = optionals.authorNotIn, authorUrl = optionals.authorUrl, commentIn = optionals.commentIn, commentNotIn = optionals.commentNotIn, commentType = optionals.commentType, commentTypeIn = optionals.commentTypeIn, commentTypeNotIn = optionals.commentTypeNotIn, contentAuthor = optionals.contentAuthor, contentAuthorIn = optionals.contentAuthorIn, contentAuthorNotIn = optionals.contentAuthorNotIn, contentId = optionals.contentId, contentIdIn = optionals.contentIdIn, contentIdNotIn = optionals.contentIdNotIn, contentName = optionals.contentName, contentParent = optionals.contentParent, contentStatus = optionals.contentStatus, contentType = optionals.contentType, includeUnapproved = optionals.includeUnapproved, karma = optionals.karma, order = optionals.order, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, search = optionals.search, status = optionals.status, userId = optionals.userId }


type alias UserToCommentConnectionWhereArgsOptionalFields =
    { authorEmail : OptionalArgument String
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorUrl : OptionalArgument String
    , commentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentType : OptionalArgument String
    , commentTypeIn : OptionalArgument (List (Maybe String))
    , commentTypeNotIn : OptionalArgument String
    , contentAuthor : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , contentIdIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentIdNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentName : OptionalArgument String
    , contentParent : OptionalArgument Int
    , contentStatus : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , contentType : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , includeUnapproved : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , karma : OptionalArgument Int
    , order : OptionalArgument Wordpress.Enum.OrderEnum.OrderEnum
    , orderby : OptionalArgument Wordpress.Enum.CommentsConnectionOrderbyEnum.CommentsConnectionOrderbyEnum
    , parent : OptionalArgument Int
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , search : OptionalArgument String
    , status : OptionalArgument String
    , userId : OptionalArgument Wordpress.ScalarCodecs.Id
    }


{-| Type for the UserToCommentConnectionWhereArgs input object.
-}
type alias UserToCommentConnectionWhereArgs =
    { authorEmail : OptionalArgument String
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorUrl : OptionalArgument String
    , commentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , commentType : OptionalArgument String
    , commentTypeIn : OptionalArgument (List (Maybe String))
    , commentTypeNotIn : OptionalArgument String
    , contentAuthor : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentAuthorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentId : OptionalArgument Wordpress.ScalarCodecs.Id
    , contentIdIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentIdNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , contentName : OptionalArgument String
    , contentParent : OptionalArgument Int
    , contentStatus : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , contentType : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , includeUnapproved : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , karma : OptionalArgument Int
    , order : OptionalArgument Wordpress.Enum.OrderEnum.OrderEnum
    , orderby : OptionalArgument Wordpress.Enum.CommentsConnectionOrderbyEnum.CommentsConnectionOrderbyEnum
    , parent : OptionalArgument Int
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , search : OptionalArgument String
    , status : OptionalArgument String
    , userId : OptionalArgument Wordpress.ScalarCodecs.Id
    }


{-| Encode a UserToCommentConnectionWhereArgs into a value that can be used as an argument.
-}
encodeUserToCommentConnectionWhereArgs : UserToCommentConnectionWhereArgs -> Value
encodeUserToCommentConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "authorEmail", Encode.string |> Encode.optional input.authorEmail ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "authorUrl", Encode.string |> Encode.optional input.authorUrl ), ( "commentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.commentIn ), ( "commentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.commentNotIn ), ( "commentType", Encode.string |> Encode.optional input.commentType ), ( "commentTypeIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.commentTypeIn ), ( "commentTypeNotIn", Encode.string |> Encode.optional input.commentTypeNotIn ), ( "contentAuthor", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthor ), ( "contentAuthorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthorIn ), ( "contentAuthorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentAuthorNotIn ), ( "contentId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.contentId ), ( "contentIdIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentIdIn ), ( "contentIdNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.contentIdNotIn ), ( "contentName", Encode.string |> Encode.optional input.contentName ), ( "contentParent", Encode.int |> Encode.optional input.contentParent ), ( "contentStatus", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.contentStatus ), ( "contentType", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.contentType ), ( "includeUnapproved", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.includeUnapproved ), ( "karma", Encode.int |> Encode.optional input.karma ), ( "order", Encode.enum Wordpress.Enum.OrderEnum.toString |> Encode.optional input.order ), ( "orderby", Encode.enum Wordpress.Enum.CommentsConnectionOrderbyEnum.toString |> Encode.optional input.orderby ), ( "parent", Encode.int |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "search", Encode.string |> Encode.optional input.search ), ( "status", Encode.string |> Encode.optional input.status ), ( "userId", (Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.optional input.userId ) ]


buildUserToMediaItemConnectionWhereArgs : (UserToMediaItemConnectionWhereArgsOptionalFields -> UserToMediaItemConnectionWhereArgsOptionalFields) -> UserToMediaItemConnectionWhereArgs
buildUserToMediaItemConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { author = Absent, authorIn = Absent, authorName = Absent, authorNotIn = Absent, categoryId = Absent, categoryIn = Absent, categoryName = Absent, categoryNotIn = Absent, dateQuery = Absent, hasPassword = Absent, id = Absent, in_ = Absent, mimeType = Absent, name = Absent, nameIn = Absent, notIn = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, password = Absent, search = Absent, stati = Absent, status = Absent, tag = Absent, tagId = Absent, tagIn = Absent, tagNotIn = Absent, tagSlugAnd = Absent, tagSlugIn = Absent, title = Absent }
    in
    { author = optionals.author, authorIn = optionals.authorIn, authorName = optionals.authorName, authorNotIn = optionals.authorNotIn, categoryId = optionals.categoryId, categoryIn = optionals.categoryIn, categoryName = optionals.categoryName, categoryNotIn = optionals.categoryNotIn, dateQuery = optionals.dateQuery, hasPassword = optionals.hasPassword, id = optionals.id, in_ = optionals.in_, mimeType = optionals.mimeType, name = optionals.name, nameIn = optionals.nameIn, notIn = optionals.notIn, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, password = optionals.password, search = optionals.search, stati = optionals.stati, status = optionals.status, tag = optionals.tag, tagId = optionals.tagId, tagIn = optionals.tagIn, tagNotIn = optionals.tagNotIn, tagSlugAnd = optionals.tagSlugAnd, tagSlugIn = optionals.tagSlugIn, title = optionals.title }


type alias UserToMediaItemConnectionWhereArgsOptionalFields =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Type for the UserToMediaItemConnectionWhereArgs input object.
-}
type alias UserToMediaItemConnectionWhereArgs =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Encode a UserToMediaItemConnectionWhereArgs into a value that can be used as an argument.
-}
encodeUserToMediaItemConnectionWhereArgs : UserToMediaItemConnectionWhereArgs -> Value
encodeUserToMediaItemConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "author", Encode.int |> Encode.optional input.author ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorName", Encode.string |> Encode.optional input.authorName ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "categoryId", Encode.int |> Encode.optional input.categoryId ), ( "categoryIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryIn ), ( "categoryName", Encode.string |> Encode.optional input.categoryName ), ( "categoryNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryNotIn ), ( "dateQuery", encodeDateQueryInput |> Encode.optional input.dateQuery ), ( "hasPassword", Encode.bool |> Encode.optional input.hasPassword ), ( "id", Encode.int |> Encode.optional input.id ), ( "in", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.in_ ), ( "mimeType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.mimeType ), ( "name", Encode.string |> Encode.optional input.name ), ( "nameIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.nameIn ), ( "notIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.notIn ), ( "orderby", (encodePostObjectsConnectionOrderbyInput |> Encode.maybe |> Encode.list) |> Encode.optional input.orderby ), ( "parent", Encode.string |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "password", Encode.string |> Encode.optional input.password ), ( "search", Encode.string |> Encode.optional input.search ), ( "stati", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.stati ), ( "status", Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.optional input.status ), ( "tag", Encode.string |> Encode.optional input.tag ), ( "tagId", Encode.string |> Encode.optional input.tagId ), ( "tagIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagIn ), ( "tagNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagNotIn ), ( "tagSlugAnd", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugAnd ), ( "tagSlugIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugIn ), ( "title", Encode.string |> Encode.optional input.title ) ]


buildUserToPageConnectionWhereArgs : (UserToPageConnectionWhereArgsOptionalFields -> UserToPageConnectionWhereArgsOptionalFields) -> UserToPageConnectionWhereArgs
buildUserToPageConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { author = Absent, authorIn = Absent, authorName = Absent, authorNotIn = Absent, categoryId = Absent, categoryIn = Absent, categoryName = Absent, categoryNotIn = Absent, dateQuery = Absent, hasPassword = Absent, id = Absent, in_ = Absent, mimeType = Absent, name = Absent, nameIn = Absent, notIn = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, password = Absent, search = Absent, stati = Absent, status = Absent, tag = Absent, tagId = Absent, tagIn = Absent, tagNotIn = Absent, tagSlugAnd = Absent, tagSlugIn = Absent, title = Absent }
    in
    { author = optionals.author, authorIn = optionals.authorIn, authorName = optionals.authorName, authorNotIn = optionals.authorNotIn, categoryId = optionals.categoryId, categoryIn = optionals.categoryIn, categoryName = optionals.categoryName, categoryNotIn = optionals.categoryNotIn, dateQuery = optionals.dateQuery, hasPassword = optionals.hasPassword, id = optionals.id, in_ = optionals.in_, mimeType = optionals.mimeType, name = optionals.name, nameIn = optionals.nameIn, notIn = optionals.notIn, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, password = optionals.password, search = optionals.search, stati = optionals.stati, status = optionals.status, tag = optionals.tag, tagId = optionals.tagId, tagIn = optionals.tagIn, tagNotIn = optionals.tagNotIn, tagSlugAnd = optionals.tagSlugAnd, tagSlugIn = optionals.tagSlugIn, title = optionals.title }


type alias UserToPageConnectionWhereArgsOptionalFields =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Type for the UserToPageConnectionWhereArgs input object.
-}
type alias UserToPageConnectionWhereArgs =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Encode a UserToPageConnectionWhereArgs into a value that can be used as an argument.
-}
encodeUserToPageConnectionWhereArgs : UserToPageConnectionWhereArgs -> Value
encodeUserToPageConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "author", Encode.int |> Encode.optional input.author ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorName", Encode.string |> Encode.optional input.authorName ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "categoryId", Encode.int |> Encode.optional input.categoryId ), ( "categoryIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryIn ), ( "categoryName", Encode.string |> Encode.optional input.categoryName ), ( "categoryNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryNotIn ), ( "dateQuery", encodeDateQueryInput |> Encode.optional input.dateQuery ), ( "hasPassword", Encode.bool |> Encode.optional input.hasPassword ), ( "id", Encode.int |> Encode.optional input.id ), ( "in", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.in_ ), ( "mimeType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.mimeType ), ( "name", Encode.string |> Encode.optional input.name ), ( "nameIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.nameIn ), ( "notIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.notIn ), ( "orderby", (encodePostObjectsConnectionOrderbyInput |> Encode.maybe |> Encode.list) |> Encode.optional input.orderby ), ( "parent", Encode.string |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "password", Encode.string |> Encode.optional input.password ), ( "search", Encode.string |> Encode.optional input.search ), ( "stati", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.stati ), ( "status", Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.optional input.status ), ( "tag", Encode.string |> Encode.optional input.tag ), ( "tagId", Encode.string |> Encode.optional input.tagId ), ( "tagIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagIn ), ( "tagNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagNotIn ), ( "tagSlugAnd", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugAnd ), ( "tagSlugIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugIn ), ( "title", Encode.string |> Encode.optional input.title ) ]


buildUserToPostConnectionWhereArgs : (UserToPostConnectionWhereArgsOptionalFields -> UserToPostConnectionWhereArgsOptionalFields) -> UserToPostConnectionWhereArgs
buildUserToPostConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { author = Absent, authorIn = Absent, authorName = Absent, authorNotIn = Absent, categoryId = Absent, categoryIn = Absent, categoryName = Absent, categoryNotIn = Absent, dateQuery = Absent, hasPassword = Absent, id = Absent, in_ = Absent, mimeType = Absent, name = Absent, nameIn = Absent, notIn = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, password = Absent, search = Absent, stati = Absent, status = Absent, tag = Absent, tagId = Absent, tagIn = Absent, tagNotIn = Absent, tagSlugAnd = Absent, tagSlugIn = Absent, title = Absent }
    in
    { author = optionals.author, authorIn = optionals.authorIn, authorName = optionals.authorName, authorNotIn = optionals.authorNotIn, categoryId = optionals.categoryId, categoryIn = optionals.categoryIn, categoryName = optionals.categoryName, categoryNotIn = optionals.categoryNotIn, dateQuery = optionals.dateQuery, hasPassword = optionals.hasPassword, id = optionals.id, in_ = optionals.in_, mimeType = optionals.mimeType, name = optionals.name, nameIn = optionals.nameIn, notIn = optionals.notIn, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, password = optionals.password, search = optionals.search, stati = optionals.stati, status = optionals.status, tag = optionals.tag, tagId = optionals.tagId, tagIn = optionals.tagIn, tagNotIn = optionals.tagNotIn, tagSlugAnd = optionals.tagSlugAnd, tagSlugIn = optionals.tagSlugIn, title = optionals.title }


type alias UserToPostConnectionWhereArgsOptionalFields =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Type for the UserToPostConnectionWhereArgs input object.
-}
type alias UserToPostConnectionWhereArgs =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Encode a UserToPostConnectionWhereArgs into a value that can be used as an argument.
-}
encodeUserToPostConnectionWhereArgs : UserToPostConnectionWhereArgs -> Value
encodeUserToPostConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "author", Encode.int |> Encode.optional input.author ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorName", Encode.string |> Encode.optional input.authorName ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "categoryId", Encode.int |> Encode.optional input.categoryId ), ( "categoryIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryIn ), ( "categoryName", Encode.string |> Encode.optional input.categoryName ), ( "categoryNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryNotIn ), ( "dateQuery", encodeDateQueryInput |> Encode.optional input.dateQuery ), ( "hasPassword", Encode.bool |> Encode.optional input.hasPassword ), ( "id", Encode.int |> Encode.optional input.id ), ( "in", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.in_ ), ( "mimeType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.mimeType ), ( "name", Encode.string |> Encode.optional input.name ), ( "nameIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.nameIn ), ( "notIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.notIn ), ( "orderby", (encodePostObjectsConnectionOrderbyInput |> Encode.maybe |> Encode.list) |> Encode.optional input.orderby ), ( "parent", Encode.string |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "password", Encode.string |> Encode.optional input.password ), ( "search", Encode.string |> Encode.optional input.search ), ( "stati", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.stati ), ( "status", Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.optional input.status ), ( "tag", Encode.string |> Encode.optional input.tag ), ( "tagId", Encode.string |> Encode.optional input.tagId ), ( "tagIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagIn ), ( "tagNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagNotIn ), ( "tagSlugAnd", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugAnd ), ( "tagSlugIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugIn ), ( "title", Encode.string |> Encode.optional input.title ) ]


buildUserToRevisionConnectionWhereArgs : (UserToRevisionConnectionWhereArgsOptionalFields -> UserToRevisionConnectionWhereArgsOptionalFields) -> UserToRevisionConnectionWhereArgs
buildUserToRevisionConnectionWhereArgs fillOptionals =
    let
        optionals =
            fillOptionals
                { author = Absent, authorIn = Absent, authorName = Absent, authorNotIn = Absent, categoryId = Absent, categoryIn = Absent, categoryName = Absent, categoryNotIn = Absent, dateQuery = Absent, hasPassword = Absent, id = Absent, in_ = Absent, mimeType = Absent, name = Absent, nameIn = Absent, notIn = Absent, orderby = Absent, parent = Absent, parentIn = Absent, parentNotIn = Absent, password = Absent, search = Absent, stati = Absent, status = Absent, tag = Absent, tagId = Absent, tagIn = Absent, tagNotIn = Absent, tagSlugAnd = Absent, tagSlugIn = Absent, title = Absent }
    in
    { author = optionals.author, authorIn = optionals.authorIn, authorName = optionals.authorName, authorNotIn = optionals.authorNotIn, categoryId = optionals.categoryId, categoryIn = optionals.categoryIn, categoryName = optionals.categoryName, categoryNotIn = optionals.categoryNotIn, dateQuery = optionals.dateQuery, hasPassword = optionals.hasPassword, id = optionals.id, in_ = optionals.in_, mimeType = optionals.mimeType, name = optionals.name, nameIn = optionals.nameIn, notIn = optionals.notIn, orderby = optionals.orderby, parent = optionals.parent, parentIn = optionals.parentIn, parentNotIn = optionals.parentNotIn, password = optionals.password, search = optionals.search, stati = optionals.stati, status = optionals.status, tag = optionals.tag, tagId = optionals.tagId, tagIn = optionals.tagIn, tagNotIn = optionals.tagNotIn, tagSlugAnd = optionals.tagSlugAnd, tagSlugIn = optionals.tagSlugIn, title = optionals.title }


type alias UserToRevisionConnectionWhereArgsOptionalFields =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Type for the UserToRevisionConnectionWhereArgs input object.
-}
type alias UserToRevisionConnectionWhereArgs =
    { author : OptionalArgument Int
    , authorIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , authorName : OptionalArgument String
    , authorNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryId : OptionalArgument Int
    , categoryIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , categoryName : OptionalArgument String
    , categoryNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , dateQuery : OptionalArgument DateQueryInput
    , hasPassword : OptionalArgument Bool
    , id : OptionalArgument Int
    , in_ : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , mimeType : OptionalArgument Wordpress.Enum.MimeTypeEnum.MimeTypeEnum
    , name : OptionalArgument String
    , nameIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , orderby : OptionalArgument (List (Maybe PostObjectsConnectionOrderbyInput))
    , parent : OptionalArgument String
    , parentIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , parentNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , password : OptionalArgument String
    , search : OptionalArgument String
    , stati : OptionalArgument (List (Maybe Wordpress.Enum.PostStatusEnum.PostStatusEnum))
    , status : OptionalArgument Wordpress.Enum.PostStatusEnum.PostStatusEnum
    , tag : OptionalArgument String
    , tagId : OptionalArgument String
    , tagIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagNotIn : OptionalArgument (List (Maybe Wordpress.ScalarCodecs.Id))
    , tagSlugAnd : OptionalArgument (List (Maybe String))
    , tagSlugIn : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    }


{-| Encode a UserToRevisionConnectionWhereArgs into a value that can be used as an argument.
-}
encodeUserToRevisionConnectionWhereArgs : UserToRevisionConnectionWhereArgs -> Value
encodeUserToRevisionConnectionWhereArgs input =
    Encode.maybeObject
        [ ( "author", Encode.int |> Encode.optional input.author ), ( "authorIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorIn ), ( "authorName", Encode.string |> Encode.optional input.authorName ), ( "authorNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.authorNotIn ), ( "categoryId", Encode.int |> Encode.optional input.categoryId ), ( "categoryIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryIn ), ( "categoryName", Encode.string |> Encode.optional input.categoryName ), ( "categoryNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.categoryNotIn ), ( "dateQuery", encodeDateQueryInput |> Encode.optional input.dateQuery ), ( "hasPassword", Encode.bool |> Encode.optional input.hasPassword ), ( "id", Encode.int |> Encode.optional input.id ), ( "in", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.in_ ), ( "mimeType", Encode.enum Wordpress.Enum.MimeTypeEnum.toString |> Encode.optional input.mimeType ), ( "name", Encode.string |> Encode.optional input.name ), ( "nameIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.nameIn ), ( "notIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.notIn ), ( "orderby", (encodePostObjectsConnectionOrderbyInput |> Encode.maybe |> Encode.list) |> Encode.optional input.orderby ), ( "parent", Encode.string |> Encode.optional input.parent ), ( "parentIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentIn ), ( "parentNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.parentNotIn ), ( "password", Encode.string |> Encode.optional input.password ), ( "search", Encode.string |> Encode.optional input.search ), ( "stati", (Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.stati ), ( "status", Encode.enum Wordpress.Enum.PostStatusEnum.toString |> Encode.optional input.status ), ( "tag", Encode.string |> Encode.optional input.tag ), ( "tagId", Encode.string |> Encode.optional input.tagId ), ( "tagIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagIn ), ( "tagNotIn", ((Wordpress.ScalarCodecs.codecs |> Wordpress.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input.tagNotIn ), ( "tagSlugAnd", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugAnd ), ( "tagSlugIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.tagSlugIn ), ( "title", Encode.string |> Encode.optional input.title ) ]
